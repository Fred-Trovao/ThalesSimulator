<?xml version="1.0"?>
<doc>
<assembly>
<name>
ThalesCore
</name>
</assembly>
<members>
<member name="T:ThalesSim.Core.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:ThalesSim.Core.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:ThalesSim.Core.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.AConsoleCommand">
 <summary>
 This is the base class from which all console commands are derived.
 </summary>
 <remarks>Console commands are activated by a specific code from the
 console. After requesting a series of information all commands produce
 a result and terminate.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.AConsoleCommand.ZEROES">
 <summary>
 16 zeroes.
 </summary>
 <remarks>
 16 zeroes.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.AConsoleCommand.m_commandFinished">
 <summary>
 Indicates whether a command has finished processing.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.AConsoleCommand.m_stack">
 <summary>
 Stack of messages to send to the console.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.AConsoleCommand.m_inStack">
 <summary>
 Stack of messages already send to the console and responded to by the user.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.AConsoleCommand.m_curMessage">
 <summary>
 Current message being processed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.AConsoleCommand.hasComponents">
 <summary>
 True if the implementor needs a variable number of key components.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.AConsoleCommand.numComponents">
 <summary>
 Number of key components needed by the implementor.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.AConsoleCommand.CommandFinished">
 <summary>
 Determines whether processing of the command has finished.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.IsNoinputCommand">
 <summary>
 Returns True if the implemented command requires no input.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.GetClientMessage">
 <summary>
 Called to acquire the next message that will be send to the console.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.AcceptMessage(System.String)">
 <summary>
 Called when a message from the console arrives.
 </summary>
 <param name="consoleMsg">String message from console.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.InitializeStack">
 <summary>
 Called during initialization to setup the message stack.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.ProcessMessage">
 <summary>
 Called when all messages have been exchanged. Implementations should place the command processing here.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.ValidateKeyTypeCode(System.String,ThalesSim.Core.LMKPairs.LMKPair@,System.String@)">
 <summary>
 Parses and validates a key type code.
 </summary>
 <remarks>
 This method parses a key type code. If all is well, the <b>Pair</b> and <b>Var</b> 
 output variables. Otherwise, the method throws an exception.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.ValidateKeySchemeCode(System.String,ThalesSim.Core.KeySchemeTable.KeyScheme@)">
 <summary>
 Parses and validates a key scheme code.
 </summary>
 <remarks>
 This method parses a key scheme code. If all is well, the <b>KS</b> output variable
 is set. Otherwise, an the method throws an exception.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.ValidateKeySchemeAndLength(System.String,System.String,ThalesSim.Core.KeySchemeTable.KeyScheme@)">
 <summary>
 Validates a key scheme combined with a key length.
 </summary>
 <param name="keyLen">Key length (1,2,3)</param>
 <param name="keyScheme">Key scheme (0,X,T,Y,U)</param>
 <param name="ks">KeyScheme variable set according to previous parameters.</param>
 <remarks>This method sets the value of the ks parameter according to the values of keyLen and keyScheme.
 If keyLen and keyScheme don't match (for example, keyLen=1 and keyScheme=X), an exception is thrown.</remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.ValidateFunctionRequirement(ThalesSim.Core.KeyTypeTable.KeyFunction,ThalesSim.Core.LMKPairs.LMKPair,System.String)">
 <summary>
 Determines whether function requirements are met.
 </summary>
 <remarks>
 If the function requirements are met for the specified parameters, the method returns.
 Otherwise, an exception is thrown.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.ExtractKeySchemeAndLength(System.String,ThalesSim.Core.Cryptography.HexKey.KeyLength@,ThalesSim.Core.KeySchemeTable.KeyScheme@)">
 <summary>
 Given a hex key, returns the key length and scheme.
 </summary>
 <param name="key">Hex key.</param>
 <param name="keyLen">Key length.</param>
 <param name="keyScheme">Key scheme.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.MakeKeyPresentable(System.String)">
 <summary>
 Formats a key in a way that is easier to read.
 </summary>
 <param name="key">Original key.</param>
 <returns>Formatted key.</returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.AConsoleCommand.MakeCheckValuePresentable(System.String)">
 <summary>
 Formats a key check value in a way that is easier to read.
 </summary>
 <param name="cv">Original check value.</param>
 <returns>Formatted check value.</returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ExtendedValidator">
 <summary>
 This class allows console commands to chain validators in order to
 perform several checks in sequence.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ExtendedValidator.m_nextVal">
 <summary>
 Internal storage for the next validator in the chain.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ExtendedValidator.m_currentVal">
 <summary>
 Current validator to be used.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ExtendedValidator.#ctor(ThalesSim.Core.ConsoleCommands.IConsoleDataValidator)">
 <summary>
 Creates an extended validator instance.
 </summary>
 <param name="validator">Validator instance.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ExtendedValidator.Add(ThalesSim.Core.ConsoleCommands.IConsoleDataValidator)">
 <summary>
 Adds another validator to the chain.
 </summary>
 <param name="nextValidator">Next validator instance.</param>
 <returns></returns>
 <remarks>
 Note that any validator added with this method cannot be the <b>last</b> validator.
 To add the last validator see the <see cref="M:ThalesSim.Core.ConsoleCommands.ExtendedValidator.AddLast(ThalesSim.Core.ConsoleCommands.IConsoleDataValidator)" /> method of this class.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ExtendedValidator.AddLast(ThalesSim.Core.ConsoleCommands.IConsoleDataValidator)">
 <summary>
 Adds the last validator to the chain.
 </summary>
 <param name="nextValidator">Last validator instance.</param>
 <returns></returns>
 <remarks>
 Note that the validator added with this method must be the <b>last</b> validator.
 To add any validator other than the last see the <see cref="M:ThalesSim.Core.ConsoleCommands.ExtendedValidator.Add(ThalesSim.Core.ConsoleCommands.IConsoleDataValidator)" /> method of this class.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ExtendedValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Runs through all validators in the chain.
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.CancelAuthorizedState_C">
 <summary>
 Cancel the authorized state command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.CancelAuthorizedState_C.InitializeStack">
 <summary>
 No stack, since this is an immediate command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.CancelAuthorizedState_C.ProcessMessage">
 <summary>
 Cancels the authorized state.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass">
 <summary>
 This class holds information about a console command.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass.m_commandCode">
 <summary>
 Internal storage for the console command code.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass.m_commandDescription">
 <summary>
 Internal storage for the console command description.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass.m_commandType">
 <summary>
 Internal storage for the console command type.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass.CommandCode">
 <summary>
 Get/set the console command code.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass.CommandDescription">
 <summary>
 Get/set the console command description.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass.CommandType">
 <summary>
 Get/set the type that implements the console command.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass.#ctor(System.String,System.String,System.Type)">
 <summary>
 Default class constructor.
 </summary>
 <param name="commandCode">Console command code.</param>
 <param name="commandDescription">Description of console command.</param>
 <param name="commandType">Implementor type.</param>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ConsoleCommandExplorer">
 <summary>
 Used to find class that implement console commands.
 </summary>
 <remarks>
 The console command explorer is used to find classes amongst the loaded assemblies that
 have the <see cref="T:ThalesSim.Core.ConsoleCommands.ThalesConsoleCommandCode"/> attribute.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleCommandExplorer.#ctor">
 <summary>
 CommandExplorer constructor.
 </summary>
 <remarks>
 The constructor will search the loaded assemblies for classes that have the
 <see cref="T:ThalesSim.Core.ConsoleCommands.ThalesConsoleCommandCode"/> attribute.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleCommandExplorer.GetLoadedCommands">
 <summary>
 Returns a summary of all loaded console commands.
 </summary>
 <remarks>
 The method returns a summary description of all loaded host commands (classes that
 inherit from <see cref="T:ThalesSim.Core.ConsoleCommands.AConsoleCommand"/> and declare the 
 <see cref="T:ThalesSim.Core.ConsoleCommands.ThalesConsoleCommandCode"/> attribute).
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleCommandExplorer.GetLoadedCommand(System.String)">
 <summary>
 Returns a <see cref="T:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass"/> object for a specified command.
 </summary>
 <remarks>
 Returns a <see cref="T:ThalesSim.Core.ConsoleCommands.ConsoleCommandClass"/> object for a specified command. If the
 command is not implemented, Nothing is returned.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleCommandExplorer.ClearLoadedCommands">
 <summary>
 Clears the sorted list with the loaded commands.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ConsoleMessageStack">
 <summary>
 This class holds a stack of console messages.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleMessageStack.m_stack">
 <summary>
 Internal stack storage.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleMessageStack.PushToStack(ThalesSim.Core.ConsoleCommands.ConsoleMessage)">
 <summary>
 Pushes a message to the stack.
 </summary>
 <param name="msg">Console message instance.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleMessageStack.PopFromStack">
 <summary>
 Pops and returns a message from the stack.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleMessageStack.MessagesOnStack">
 <summary>
 Returns the number of messages on the stack.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ConsoleMessage">
 <summary>
 Class used to hold information about a data exchange between the console and the simulator.
 </summary>
 <remarks>
 Console commands are made up of a series of information entered by the user. For example, 
 the GC command requires the user to enter the key length, key type and key scheme. During
 these information exchanges, the simulator sends a message to the console that informs the
 user of the data that is required and the user types in the data which is send to the 
 simulator by the console.
 
 Objects of this class are used to hold information about one such data exchange.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleMessage.m_clientMessage">
 <summary>
 Internal storage of the message displayed to the console.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleMessage.m_consoleMessage">
 <summary>
 Internal storage of the data entered by teh user.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleMessage.m_isNumberOfComponents">
 <summary>
 Internal storage for the flag that designates that this is a number of components.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleMessage.m_isComponent">
 <summary>
 Internal storage for the flag that designates that this is a component.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ConsoleMessage.m_messageValidator">
 <summary>
 Internal storage for the validator.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.ConsoleMessage.ClientMessage">
 <summary>
 Get/set the message to send to the console, prompting the user for information.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.ConsoleMessage.ConsoleMessage">
 <summary>
 Get/set the data passed from the console to the simulator.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.ConsoleMessage.IsNumberOfComponents">
 <summary>
 Get/set a flag that indicates whether this message refers to a number of components.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.ConsoleMessage.IsComponent">
 <summary>
 Get/set a flag that indicates whether this message refers to a component.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.ConsoleCommands.ConsoleMessage.ConsoleMessageValidator">
 <summary>
 Get/set the validator that will verify the data passed to the simulator by the user.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>If this is not set, no validation is performed.</remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleMessage.#ctor(System.String,System.String,ThalesSim.Core.ConsoleCommands.IConsoleDataValidator)">
 <summary>
 Creates an instance of this class.
 </summary>
 <param name="clientMessage">Message to console.</param>
 <param name="consoleMessage">Data from console.</param>
 <param name="messageValidator">Validator instance.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleMessage.#ctor(System.String,System.String,System.Boolean,ThalesSim.Core.ConsoleCommands.IConsoleDataValidator)">
 <summary>
 Creates an instance of this class with an option to define whether it refers to a number of components entry.
 </summary>
 <param name="clientMessage">Message to console.</param>
 <param name="consoleMessage">Data from console.</param>
 <param name="isNumberOfComponents">Flag that indicates whether this refers to a number of components entry.</param>
 <param name="messageValidator">Validator instance.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ConsoleMessage.#ctor(System.String,System.String,System.Boolean,System.Boolean,ThalesSim.Core.ConsoleCommands.IConsoleDataValidator)">
 <summary>
 Creates an instance of this class with an option to define whether it refers
 to a number of components entry or to a component entry.
 </summary>
 <param name="clientMessage">Message to console.</param>
 <param name="consoleMessage">Data from console.</param>
 <param name="isNumberOfComponents">Flag that indicates whether this refers to a number of components entry.</param>
 ''' <param name="isComponent">Flag that indicates whether this refers to a component entry.</param>
 <param name="messageValidator">Validator instance.</param>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.DoubleLengthDESCalculator_Dollar">
 <summary>
 Double-length DES calculator.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.DoubleLengthDESCalculator_Dollar.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.DoubleLengthDESCalculator_Dollar.ProcessMessage">
 <summary>
 Encrypts and returns the result
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.EncryptClearComponent_EC">
 <summary>
 Encrypts a clear component.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.EncryptClearComponent_EC.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.EncryptClearComponent_EC.ProcessMessage">
 <summary>
 Generate and return the key (clear and encrypted, along with check value).
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.EncryptZMKComponent_Z">
 <summary>
 Encrypts a clear ZMK component.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.EncryptZMKComponent_Z.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.EncryptZMKComponent_Z.ProcessMessage">
 <summary>
 Generate a ZMK component and return it (clear and encrypted) to the console.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.EnterAuthorizedState_A">
 <summary>
 Enter the authorized state command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.EnterAuthorizedState_A.InitializeStack">
 <summary>
 No stack, since this is an immediate command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.EnterAuthorizedState_A.ProcessMessage">
 <summary>
 Cancels the authorized state.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.IConsoleDataValidator">
 <summary>
 Interface that should be implemented by classes that validate a console message.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.IConsoleDataValidator.ValidateConsoleMessage(System.String)">
 <summary>
 This method validates a console message.
 Implementors should throw an exception to indicate an error.
 </summary>
 <param name="consoleMsg"></param>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ExportKey_KE">
 <summary>
 Exports a key.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ExportKey_KE.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ExportKey_KE.ProcessMessage">
 <summary>
 Exports a key encrypted under LMK and returns it encrypted under the ZMK.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.FormKeyFromComponents_FK">
 <summary>
 Forms a key from components (clear or encrypted).
 </summary>
 <remarks>Obviously, input from smart cards is not supported.
 
 The current message stack arrangement does not permit the extended checking of user data.
 For example, components may be 8 or 16 hexadecimal characters if clear half or clear third key
 component types are selected. But, if clear XOR components are selected then they can be
 16, 32 or 48 characters.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormKeyFromComponents_FK.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormKeyFromComponents_FK.ProcessMessage">
 <summary>
 Generate and return the key (clear and encrypted, along with check value).
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormKeyFromComponents_FK.AllSameLength(System.String[])">
 <summary>
 Determines whether all keys in an array are of the same length.
 </summary>
 <param name="keys">Array with hexadecimal keys.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormKeyFromComponents_FK.AllSameStartChar(System.String[])">
 <summary>
 Determines whether all keys in an array begin with the same prefix.
 </summary>
 <param name="keys">Array with hexadecimal keys.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormKeyFromComponents_FK.XORAllKeys(System.String[])">
 <summary>
 XORs all keys in an array.
 </summary>
 <param name="keys">Array with hexadecimal keys.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.FormZMKFromEncryptedComponents_D">
 <summary>
 Forms a ZMK from encrypted components.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormZMKFromEncryptedComponents_D.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormZMKFromEncryptedComponents_D.ProcessMessage">
 <summary>
 Generate and return the key (clear and encrypted, along with check value).
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormZMKFromEncryptedComponents_D.AllSameLength(System.String[])">
 <summary>
 Determines whether all keys in an array are of the same length.
 </summary>
 <param name="keys">Array with hexadecimal keys.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.FormZMKFromEncryptedComponents_D.XORAllKeys(System.String[])">
 <summary>
 XORs all keys in an array.
 </summary>
 <param name="keys">Array with hexadecimal keys.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.GenerateKeyComponent_GC">
 <summary>
 Generate a key component command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.GenerateKeyComponent_GC.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.GenerateKeyComponent_GC.ProcessMessage">
 <summary>
 Generate and return the key (clear and encrypted, along with check value).
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.GenerateKey_KG">
 <summary>
 Generates a key.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.GenerateKey_KG.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.GenerateKey_KG.ProcessMessage">
 <summary>
 Generate a key and returns it under LMK and optionally under ZMK.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.GenerateZMKComponent_F">
 <summary>
 Generate a ZMK component.
 </summary>
 <remarks>
 Normally this would generate either a single or double-length ZMK, depending
 upon the HSM configuration (accessible by the CS console command). Since we
 don't have this configuration, we'll produce both a single and a double-length
 ZMK and return it to the console.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.GenerateZMKComponent_F.InitializeStack">
 <summary>
 No stack, since this is an immediate command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.GenerateZMKComponent_F.ProcessMessage">
 <summary>
 Generate a ZMK component and return it (clear and encrypted) to the console.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ImportKey_IK">
 <summary>
 Imports a key.
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ImportKey_IK.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ImportKey_IK.ProcessMessage">
 <summary>
 Imports a key encrypted under a ZMK and returns it encrypted under the appropriate LMK.
 </summary>
 <returns></returns>
 <remarks>Making the assumption that a key transmitted under ZMK encryption
 will always use ANSI format (therefore U is not allowed).</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.SingleLengthDESCalculator_N">
 <summary>
 Single-length DES calculator.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.SingleLengthDESCalculator_N.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.SingleLengthDESCalculator_N.ProcessMessage">
 <summary>
 Encrypts and returns the result
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.TripleLengthDESCalculator_T">
 <summary>
 Triple-length DES calculator.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.TripleLengthDESCalculator_T.InitializeStack">
 <summary>
 Stack initialization.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.TripleLengthDESCalculator_T.ProcessMessage">
 <summary>
 Encrypts and returns the result
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.CheckValueValidator">
 <summary>
 Validator that verifies a key check value.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.CheckValueValidator.#ctor">
 <summary>
 Default class constructor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.CheckValueValidator.#ctor(System.Boolean)">
 <summary>
 Constructor that allows to specify whether an empty check value is allowed.
 </summary>
 <param name="ignoreEmpty">Empty check value flag.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.CheckValueValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether a check value appears correct.
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the check value appears to be incorrect, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidCheckValue"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.DataLengthValidator">
 <summary>
 This validator verifies that a user enters S, D or T.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.DataLengthValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether the user enters S, D or T.
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the enter key is not valid, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidData"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.FlexibleHexKeyValidator">
 <summary>
 This validator makes certain a user can enter a proper hex key.
 
     - Clear hex key (16, 32 or 48 hex characters).
     - Half key (8 hex characters)
     - Variant/ANSI double or triple length keys.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.FlexibleHexKeyValidator.#ctor">
 <summary>
 Default class constructor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.FlexibleHexKeyValidator.#ctor(System.Boolean)">
 <summary>
 Constructor that allows to specify whether a hexadecimal key can be empty.
 </summary>
 <param name="ignoreEmptyKey">Empty key flag.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.FlexibleHexKeyValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether a hexadecimal key is constructed properly.
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the enter key is not a proper hexadecimal key, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidKey"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.NumberOfComponentsValidator">
 <summary>
 This validator verifies that the user enters a correct number of components.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.NumberOfComponentsValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Verifies that the user enters a correct number of components.
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the number of components is not between 2 and 9, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidNumberOfComponents"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.AuthorizedStateValidator">
 <summary>
 This validator verifies whether the simulator is in the authorized state.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.AuthorizedStateValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether the simulator is in the authorized state.
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the simulator is not in the authorized state, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XNeedsAuthorizedState"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.ComponentTypeValidator">
 <summary>
 This validator verifies that the user enters a correct component type.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.ComponentTypeValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether a correct component type is enter (X,H,E).
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the component type is incorrect, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidComponentType"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.HexKeyValidator">
 <summary>
 This validator makes certain a string is 16, 32 or 48 hex characters long.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.HexKeyValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether a key is properly formatted (16, 32 or 48 hex characters long)
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the enter key is not a proper hexadecimal key, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidKey"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.KeyLengthValidator">
 <summary>
 This validator verifies whether a correct key length has been entered.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.KeyLengthValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether a correct key length has been entered (1-3).
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the console message is incorrect, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidKeyLength"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.KeySchemeValidator">
 <summary>
 This validator verifies a key scheme string.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.KeySchemeValidator.#ctor">
 <summary>
 Default class constructor.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.KeySchemeValidator.#ctor(System.Boolean)">
 <summary>
 Constructor that allows to specify whether an empty key scheme is allowed.
 </summary>
 <param name="ignoreEmpty">Empty key scheme flag.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.KeySchemeValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether a correct key scheme has been entered (0,U,T,X,Y).
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the console message is incorrect, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidKeyScheme"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.Validators.KeyTypeValidator">
 <summary>
 Validator that verifies a key type string.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.Validators.KeyTypeValidator.ValidateConsoleMessage(System.String)">
 <summary>
 Determines whether a correct key type has been entered.
 </summary>
 <param name="consoleMsg">Console message to validate.</param>
 <remarks>If the console message is incorrect, the validator 
 throws a <see cref="T:ThalesSim.Core.Exceptions.XInvalidKeyType"/> exception.</remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.QueryAuxilliary_QA">
 <summary>
 Query auxilliary command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.QueryAuxilliary_QA.InitializeStack">
 <summary>
 No stack, since this is an immediate command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.QueryAuxilliary_QA.ProcessMessage">
 <summary>
 Return a string indicating that there's no aux port.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.QueryConsole_QC">
 <summary>
 Query console command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.QueryConsole_QC.InitializeStack">
 <summary>
 No stack, since this is an immediate command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.QueryConsole_QC.ProcessMessage">
 <summary>
 Return a note that indicates we're a simulator.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.QueryHost_QH">
 <summary>
 Query host command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.QueryHost_QH.InitializeStack">
 <summary>
 No stack, since this is an immediate command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.QueryHost_QH.ProcessMessage">
 <summary>
 Return host connection info (TCP only).
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ViewHSMSoftwareRevision_VR">
 <summary>
 View the HSM software revision command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ViewHSMSoftwareRevision_VR.InitializeStack">
 <summary>
 No stack, since this is an immediate command.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ConsoleCommands.ViewHSMSoftwareRevision_VR.ProcessMessage">
 <summary>
 Return the firmware revisions.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.ConsoleCommands.ThalesConsoleCommandCode">
 <summary>
 This class defines an attribute that is used to
 decorate classes that implement console commands.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ThalesConsoleCommandCode.ConsoleCommandCode">
 <summary>
 Console Command Code.
 </summary>
 <remarks>
 The console command code of the implementor.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ConsoleCommands.ThalesConsoleCommandCode.Description">
 <summary>
 Command description.
 </summary>
 <remarks>
 A description of the console command implemented by a class.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.EMV.KeyDerivation">
 <summary>
 This class implements methods to find a master/session derived keys.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.GetDerivedMasterKey(ThalesSim.Core.Cryptography.HexKey,System.String,System.String,ThalesSim.Core.Cryptography.EMV.MasterKeyDerivationMethods)">
 <summary>
 Finds a master derived key.
 </summary>
 <param name="IMK">Initial master key.</param>
 <param name="PAN">PAN.</param>
 <param name="PANSequenceNo">PAN Sequence Number.</param>
 <param name="DerivationMethod">Derivation method.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.GetDerivedMasterKey(ThalesSim.Core.Cryptography.HexKey,System.String,ThalesSim.Core.Cryptography.EMV.MasterKeyDerivationMethods)">
 <summary>
 Finds a master derived key.
 </summary>
 <param name="IMK">Initial master key.</param>
 <param name="PANAndPANSequenceNo">PAN and PAN Sequence Number.</param>
 <param name="DerivationMethod">Derivation method.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.GetSessionKey(ThalesSim.Core.Cryptography.HexKey,System.String,System.String,ThalesSim.Core.Cryptography.EMV.SessionKeyDerivationMethods)">
 <summary>
 Finds a session derived key.
 </summary>
 <param name="MK">Derived master key.</param>
 <param name="ATC">ATC.</param>
 <param name="UN">UN.</param>
 <param name="DerivationMethod">Derivation method.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.FindMasterCardSessionKey(ThalesSim.Core.Cryptography.HexKey,System.String,System.String)">
 <summary>
 Calculates the derived session key using the MasterCard rules.
 </summary>
 <param name="MK_AC">Derived master key.</param>
 <param name="ATC">Value of the application transaction counter.</param>
 <param name="UN">Value of the unpredictable number.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.GetDerivedKey_OptionA(ThalesSim.Core.Cryptography.HexKey,System.String,System.String)">
 <summary>
 Calculates the derived key using the initial key, the PAN and the sequence number.
 </summary>
 <param name="IMK">Initial key.</param>
 <param name="PAN">PAN.</param>
 <param name="PANSequenceNo">PAN sequence number.</param>
 <returns></returns>
 <remarks>This implements the key derivation method A.</remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.GetDerivedKey_OptionA(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Calculates the derived key using the initial key, the PAN and the sequence number.
 </summary>
 <param name="IMK">Initial key.</param>
 <param name="PANAndPANSequenceNo">PAN and PAN Sequence Number.</param>
 <returns></returns>
 <remarks>This implements the key derivation method A.</remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.GetDerivedKey_OptionB(ThalesSim.Core.Cryptography.HexKey,System.String,System.String)">
 <summary>
 Calculates the derived key using the initial key, the PAN and the sequence number.
 This method is called when the PAN is larger than 16 digits.
 </summary>
 <param name="IMK">Initial key.</param>
 <param name="PAN">PAN.</param>
 <param name="PANSequenceNo">PAN sequence number.</param>
 <returns></returns>
 <remarks>This implements the key derivation method B.</remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.GetDerivedKey_OptionB(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Calculates the derived key using the initial key, the PAN and the sequence number.
 This method is called when the PAN is larger than 16 digits.
 </summary>
 <param name="IMK">Initial key.</param>
 <param name="PANAndPANSequenceNo">PAN and PAN Sequence Number.</param>
 <returns></returns>
 <remarks>This implements the key derivation method B.</remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.EMV.KeyDerivation.GetDerivedKeyFromPreparedPAN(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Calculates the derived key using the initial key given a massaged PAN.
 </summary>
 <param name="IMK">Initial key.</param>
 <param name="Y">Prepared PAN from OptionA or OptionB methods.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.EMV.MasterKeyDerivationMethods">
 <summary>
 Defines the master key derivation methods.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.EMV.SessionKeyDerivationMethods">
 <summary>
 Defines the session key derivation methods.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.MAC.ISO9797Algorithms">
 <summary>
 Describes the MAC algorithms as defined in ISO 9797.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.MAC.ISO9797MAC">
 <summary>
 This class implements the ISO 9797 MACing methods.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.MAC.ISO9797MAC.MACHexData(System.String,ThalesSim.Core.Cryptography.HexKey,System.String@,ThalesSim.Core.Cryptography.MAC.ISO9797Algorithms,ThalesSim.Core.Cryptography.MAC.ISO9797PaddingMethods)">
 <summary>
 Generates a MAC on a hexadecimal string.
 </summary>
 <param name="dataStr">Hexadecimal string for which to generate MAC.</param>
 <param name="key">DES key to use.</param>
 <param name="IV">Initial vector.</param>
 <param name="algorithm">ISO9797 algorithm to use.</param>
 <param name="padding">ISO9797 padding method to use.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.MAC.ISO9797MAC.Algorithm3(System.String,ThalesSim.Core.Cryptography.HexKey,System.String@)">
 <summary>
 Implements algorithm 3 as defined in the ISO 9797.
 </summary>
 <param name="dataStr">String to generate MAC for.</param>
 <param name="key">DES key to use.</param>
 <param name="IV">Initial vector.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.MAC.ISO9797Pad.PadHexString(System.String,ThalesSim.Core.Cryptography.MAC.ISO9797PaddingMethods)">
 <summary>
 Pads a string to an 8-byte boundary.
 </summary>
 <param name="dataStr">Data string to pad.</param>
 <param name="paddingMethod">The padding method to use.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.MAC.ISO9797PaddingMethods">
 <summary>
 Describes the padding methods defined in ISO 9797.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.MAC.ISOX919Blocks">
 <summary>
 This enumeration defines the sequence of expected message block.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Cryptography.MAC.ISOX919Blocks.OnlyBlock">
 <summary>
 First and only block.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Cryptography.MAC.ISOX919Blocks.FirstBlock">
 <summary>
 First message block.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Cryptography.MAC.ISOX919Blocks.NextBlock">
 <summary>
 Middle message block.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Cryptography.MAC.ISOX919Blocks.FinalBlock">
 <summary>
 Last message block.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.MAC.ISOX919MAC">
 <summary>
 This class implements the ISO X9.19 MAC algorithm with zero-based padding.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.MAC.ISOX919MAC.MacHexData(System.String,ThalesSim.Core.Cryptography.HexKey,System.String,ThalesSim.Core.Cryptography.MAC.ISOX919Blocks)">
 <summary>
 Calculate a MAC using the X9.19 algorithm.
 </summary>
 <param name="dataStr">Hex data to MAC.</param>
 <param name="key">MACing key.</param>
 <param name="IV">Initial vector.</param>
 <param name="block">Message block to MAC.</param>
 <returns>MAC result.</returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.DES">
 <summary>
 Generic byte-oriented and hex-oriented DES operations.
 </summary>
 <remarks>
 The DES class uses the .Net DESCryptoServiceProvider to implement DES encryption/decryption
 using the ECB mode.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.DES.byteDESEncrypt(System.Byte[],System.Byte[],System.Byte[]@)">
 <summary>
 Encrypts a byte array.
 </summary>
 <remarks>
 The method encrypts a byte array of 16 bytes.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.DES.byteDESDecrypt(System.Byte[],System.Byte[],System.Byte[]@)">
 <summary>
 Decrypts a byte array.
 </summary>
 <remarks>
 This method decrypts a byte array of 16 bytes.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.DES.DESEncrypt(System.String,System.String)">
 <summary>
 Encrypts a hex string.
 </summary>
 <remarks>
 This method encrypts hex data under a hex key and returns the result.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.DES.DESDecrypt(System.String,System.String)">
 <summary>
 Decrypts a hex string.
 </summary>
 <remarks>
 This method decrypts hex data using a hex key and returns the result.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.HexKey">
 <summary>
 Represents a hexadecimal single, double or triple length key.
 </summary>
 <remarks>
 Objects of this class are used as placeholders for key data. 
 </remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.HexKey.KeyLength">
 <summary>
 Key length enumeration.
 </summary>
 <remarks>
 This is an enumeration that defines the length of a hexadecimal key.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Cryptography.HexKey.KeyLength.SingleLength">
 <summary>
 Single length keys.
 </summary>
 <remarks>
 Defines a single length hexadecimal key (16 digits).
 </remarks>
</member>
<member name="F:ThalesSim.Core.Cryptography.HexKey.KeyLength.DoubleLength">
 <summary>
 Double length keys.
 </summary>
 <remarks>
 Defines a double length hexadecimal key (32 digits).
 </remarks>
</member>
<member name="F:ThalesSim.Core.Cryptography.HexKey.KeyLength.TripleLength">
 <summary>
 Triple length keys.
 </summary>
 <remarks>
 Defines a triple length hexadecimal key (48 digits).
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.HexKey.PartA">
 <summary>
 First part of the key.
 </summary>
 <remarks>
 Returns or sets the first part of the represented key.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.HexKey.PartB">
 <summary>
 Second part of the key.
 </summary>
 <remarks>
 Returns or sets the second part of the represented key.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.HexKey.PartC">
 <summary>
 Third part of the key.
 </summary>
 <remarks>
 Returns or sets the third part of the represented key.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.HexKey.KeyLen">
 <summary>
 Key length.
 </summary>
 <remarks>
 Returns or sets the key length.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.HexKey.Scheme">
 <summary>
 Key scheme.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>The key scheme is determined by the key format.
 If the key is not passed correctly, the scheme will be incorrect.</remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.HexKey.#ctor(System.String)">
 <summary>
 Key constructor.
 </summary>
 <remarks>
 The constructor sets internal variables according to the length of the 
 supplied key. Use the <see cref="P:ThalesSim.Core.Cryptography.HexKey.KeyLen"/> property
 to determine the length of the key instead of the <see cref="P:ThalesSim.Core.Cryptography.HexKey.PartA"/>,
  <see cref="P:ThalesSim.Core.Cryptography.HexKey.PartB"/> and <see cref="P:ThalesSim.Core.Cryptography.HexKey.PartC"/>
 properties. Internally, the key is always represented as a triple length key according to the
 following rule:
 <P>If the key data is 16 digits long, all key parts are set to this value.</P>
 <P>If the key data is 32 digits long, <see cref="P:ThalesSim.Core.Cryptography.HexKey.PartA"/> and
 <see cref="P:ThalesSim.Core.Cryptography.HexKey.PartC"/> are both set to the first 16 digits, and
 <see cref="P:ThalesSim.Core.Cryptography.HexKey.PartB"/> is set to the last 16 digits.</P>
 <P>If the key data is 48 digits long, all key parts are distributed accordingly.</P>
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.HexKey.ToString">
 <summary>
 Returns a string representing the key.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.LMK.LMKStorage">
 <summary>
 Represents the LMK key storage.
 </summary>
 <remarks>
 This class is used to represent the LMK store. 
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.LMK.LMKStorage.LMKStorageFile">
 <summary>
 The LMK storage file.
 </summary>
 <remarks>
 Gets or sets the LMK storage file.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.LMK.LMKStorage.LMKOldStorageFile">
 <summary>
 The LMK storage file with old storage.
 </summary>
 <value></value>
 <returns></returns>
 <remarks>Gets the old LMK storage file.</remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.LMK.LMKStorage.UseOldLMKStorage">
 <summary>
 Get/set whether we'll use the old LMK storage for key retrieval.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.LMK.LMKStorage.LMK(ThalesSim.Core.LMKPairs.LMKPair)">
 <summary>
 The value of an LMK pair.
 </summary>
 <remarks>
 Gets the corresponding LMK pair value.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.LMK.LMKStorage.LMKVariant(ThalesSim.Core.LMKPairs.LMKPair,System.Int32)">
 <summary>
 The value of an LMK pair with an applied variant.
 </summary>
 <remarks>
 Gets the corresponding LMK pair value with the applied variant.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.LMK.LMKStorage.ReadLMKs(System.String)">
 <summary>
 Read LMKs from a storage file.
 </summary>
 <remarks>
 This method reads the keys stored in the storage file and saves them to memory.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.LMK.LMKStorage.GenerateLMKs">
 <summary>
 Generates random LMK keys.
 </summary>
 <remarks>
 This method generates and saves random LMK key pairs.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.LMK.LMKStorage.GenerateTestLMKs">
 <summary>
 Generates the standard LMK test set.
 </summary>
 <remarks>
 This method generates and saves the standard LMK test key set.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.LMK.LMKStorage.GenerateLMKCheckValue">
 <summary>
 Generates an LMK check value.
 </summary>
 <remarks>
 Note: This does not return the proper LMK check value, just a XOR between
 LMK keys.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.LMK.LMKStorage.CheckLMKStorage">
 <summary>
 Checks the Local Master Keys for parity errors.
 </summary>
 <remarks>
 This method checks the LMK store for parity errors.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.LMK.LMKStorage.DumpLMKs">
 <summary>
 Returns all LMKs.
 </summary>
 <remarks>
 Returns all Local Master Keys in text form.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.LMK.Variants">
 <summary>
 Racal variants abstraction.
 </summary>
 <remarks>
 This class provides an abstraction for retrieving the variant values used 
 with encryption/decryption operations with the variant method.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.LMK.Variants.VariantNbr(System.Int32)">
 <summary>
 Returns a variant value.
 </summary>
 <remarks>
 Returns a variant Racal value.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.LMK.Variants.DoubleLengthVariant(System.Int32)">
 <summary>
 Returns a variant value.
 </summary>
 <remarks>
 Returns a variant Racal value used for double-length encryption/decryption.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Cryptography.LMK.Variants.TripleLengthVariant(System.Int32)">
 <summary>
 Returns a variant value.
 </summary>
 <remarks>
 Returns a variant Racal value used for triple-length encryption/decryption.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Cryptography.TripleDES">
 <summary>
 Utility class to perform Triple DES operations.
 </summary>
 <remarks>
 This class can be used to perform 3D operations using <see cref="T:ThalesSim.Core.Cryptography.HexKey"/> hexadecimal keys.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.TripleDES.TripleDESEncrypt(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Performs an encryption operation using ECB.
 </summary>
 <remarks>
 Performs an encryption operation using ECB.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.TripleDES.TripleDESEncryptCBC(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Performs an encryption operation using CBC.
 </summary>
 <remarks>
 Performs an encryption operation using CBC.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.TripleDES.TripleDESDecrypt(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Performs a decrypt operation using ECB.
 </summary>
 <remarks>
 Performs a decryption operation using ECB.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.TripleDES.TripleDESDecryptCBC(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Performs a decrypt operation using CBC.
 </summary>
 <remarks>
 Performs a decryption operation using CBC.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.TripleDES.TripleDESEncryptVariant(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Performs an encrypt operation with an applied variant.
 </summary>
 <remarks>
 Performs an encrypt operation with an applied variant.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Cryptography.TripleDES.TripleDESDecryptVariant(ThalesSim.Core.Cryptography.HexKey,System.String)">
 <summary>
 Performs a decrypt operation with an applied variant.
 </summary>
 <remarks>
 Performs a decrypt operation with an applied variant.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XDecryptError">
 <summary>
 Decrypt Error exception.
 </summary>
 <remarks>
 This exception is raised if an error occurs during a DES encrypt operation.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XDecryptError.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XEncryptError">
 <summary>
 Encrypt Error exception.
 </summary>
 <remarks>
 This exception is raised if an error occurs during a DES encrypt operation.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XEncryptError.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XFunctionNotPermitted">
 <summary>
 This exception is thrown when a function is not permitted - typical when trying
 to create keys for which creation is forbidden.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XFunctionNotPermitted.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidAccount">
 <summary>
 Invalid Account exception.
 </summary>
 <remarks>
 This exception is raised if an invalid account is encountered.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidAccount.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidCheckValue">
 <summary>
 Invalid Check Value exception.
 </summary>
 <remarks>
 This exception is raised if a check value appears to be invalid.
 Only the format is checked (6 hex digits are expected).
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidCheckValue.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidComponentType">
 <summary>
 Invalid Component exception.
 </summary>
 <remarks>
 This exception is raised if a user enters an invalid component on console commands.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidComponentType.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidConfiguration">
 <summary>
 Invalid Configuration exception.
 </summary>
 <remarks>
 This exception is raised if the <see cref="T:ThalesSim.Core.ThalesMain"/> object cannot successfully
 read the XML configuration file.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidConfiguration.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidData">
 <summary>
 Invalid Data exception.
 </summary>
 <remarks>
 Raised when a Triple DES encrypt/decrypt operation using variants is performed
 on data that is not 32 or 48 hexadecimal characters long.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidData.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidKey">
 <summary>
 Invalid Key exception.
 </summary>
 <remarks>
 This exception is raised if an invalid key is encountered.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidKey.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidKeyLength">
 <summary>
 This exception is raised in a console-entered key is of invalid length
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidKeyLength.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidKeyScheme">
 <summary>
 Invalid Key Scheme exception.
 </summary>
 <remarks>
 This exception is thrown if an invalid key scheme is passed to a <see cref="T:ThalesSim.Core.KeySchemeTable"/> method.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidKeyScheme.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidKeyType">
 <summary>
 Invalid Key Type exception.
 </summary>
 <remarks>
 This exception is thrown if an invalid key type is used by a <see cref="T:ThalesSim.Core.KeyTypeTable"/> class method.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidKeyType.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidLMKTypeCode">
 <summary>
 Invalid LMK type code.
 </summary>
 <remarks>
 This account is raised if an invalid LMK code is provided.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidLMKTypeCode.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidNumberOfComponents">
 <summary>
 Invalid number of components.
 </summary>
 <remarks>
 This exception is thrown if a console user enters an invalid number of components.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidNumberOfComponents.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidPINLength">
 <summary>
 Invalid PIN length exception.
 </summary>
 <remarks>
 This account is raised if an invalid PIN length is encountered.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidPINLength.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XInvalidStorageFile">
 <summary>
 Invalid Storage File exception.
 </summary>
 <remarks>
 This exception is raised if an invalid (or empty) storage file is encountered.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XInvalidStorageFile.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XNeedsAuthorizedState">
 <summary>
 This exception is thrown when a function needs the authorized state
 but the simulator isn't in one.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XNeedsAuthorizedState.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XNoDeterminerMatched">
 <summary>
 No Determiner Matched exception.
 </summary>
 <remarks>
 This exception is raised if during parsing of a field that uses a
 Message.MessageFieldDeterminerCollection, no determiner
 matches to the message contents.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XNoDeterminerMatched.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XShortMessage">
 <summary>
 Short Message exception.
 </summary>
 <remarks>
 This exception is raised during message parsing if some characters appear to be
 missing from the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XShortMessage.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Exceptions.XUnsupportedPINBlockFormat">
 <summary>
 Invalid PIN Block Format exception.
 </summary>
 <remarks>
 This exception is raised if an invalid PIN Block Format is encountered.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Exceptions.XUnsupportedPINBlockFormat.#ctor(System.String)">
 <summary>
 Exception constructor.
 </summary>
 <remarks>
 The constructor sets the exception message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.AHostCommand">
 <summary>
 This is the base class for all implementations of a Racal host command.
 </summary>
 <remarks>
 All valid Racal host commands typically accept a request message and generate
 a response message. Some commands that involve printer I/O return an additional
 response message after printer I/O is concluded.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.AHostCommand.m_PrinterData">
 <summary>
 Printer data.
 </summary>
 <remarks>
 This variable is used to hold any data that the command directs to the 
 attached printer.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.AHostCommand.m_msgFields">
 <summary>
 XML message fields.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.AHostCommand.m_XMLParseResult">
 <summary>
 XML parsing result.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.AHostCommand.kvp">
 <summary>
 Parsed key-value pairs.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.HostCommands.AHostCommand.XMLMessageFields">
 <summary>
 Get/set the message fields definitions to be parsed.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.HostCommands.AHostCommand.XMLParseResult">
 <summary>
 Get/set the result of the XML parsing.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.HostCommands.AHostCommand.KeyValuePairs">
 <summary>
 Get the message key/value pairs.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.HostCommands.AHostCommand.PrinterData">
 <summary>
 Returns data printed by this command.
 </summary>
 <remarks>
 Returns data printed by this command. If the string is empty, no data have
 been printed.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Called to process a host request message.
 </summary>
 <remarks>
 Override this method to perform request message parsing. The caller will call
 this method before a call to <see cref="M:ThalesSim.Core.HostCommands.AHostCommand.ConstructResponse"/>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ConstructResponse">
 <summary>
 Called to return a response message.
 </summary>
 <remarks>
 Override this method to create a response message. At this level, the response
 message does <b>not</b> include the message header or the response code.
 
 This method is called after <see cref="M:ThalesSim.Core.HostCommands.AHostCommand.AcceptMessage(ThalesSim.Core.Message.Message)"/>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ConstructResponseAfterOperationComplete">
 <summary>
 Called to return a response message after performing printer I/O.
 </summary>
 <remarks>
 Override this method to create a response message. At this level, the response
 message does <b>not</b> include the message header or the response code. If
 the specific host command is not supposed to perform printer I/O, return Nothing.
 
 This method is called after <see cref="M:ThalesSim.Core.HostCommands.AHostCommand.ConstructResponse"/>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.Terminate">
 <summary>
 Called to perform cleanup.
 </summary>
 <remarks>
 This method is called after <see cref="M:ThalesSim.Core.HostCommands.AHostCommand.ConstructResponseAfterOperationComplete"/>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.DumpFields">
 <summary>
 Returns a text dump of the parsed fields.
 </summary>
 <remarks>
 This method returns a text dump of the message fields and their values.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ValidateKeyTypeCode(System.String,ThalesSim.Core.LMKPairs.LMKPair@,System.String@,ThalesSim.Core.Message.MessageResponse@)">
 <summary>
 Parses and validates a key type code.
 </summary>
 <remarks>
 This method parses a key type code. If all is well, the <b>Pair</b> and <b>Var</b> 
 output variables are set and the method returns <b>True</b>. Otherwise, an appropriate
 error code is added to the passed response message and the method returns <b>False</b>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ValidateKeySchemeCode(System.String,ThalesSim.Core.KeySchemeTable.KeyScheme@,ThalesSim.Core.Message.MessageResponse@)">
 <summary>
 Parses and validates a key scheme code.
 </summary>
 <remarks>
 This method parses a key scheme code. If all is well, the <b>KS</b> output variable
 is set and the method returns <b>True</b>. Otherwise, an appropriate error code is
 added to the passed response message and the method returns <b>False</b>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ValidateFunctionRequirement(ThalesSim.Core.KeyTypeTable.KeyFunction,ThalesSim.Core.LMKPairs.LMKPair,System.String,ThalesSim.Core.Message.MessageResponse@)">
 <summary>
 Determines whether function requirements are met.
 </summary>
 <remarks>
 If the function requirements are met for the specified parameters, the method returns
 <b>True</b>. Otherwise, an appropriate error code is added to the passed response
 message and the method returns <b>False</b>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.IsInAuthorizedState">
 <summary>
 Determines whether the simulator is in the authorized state.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.IsInLegacyMode">
 <summary>
 Determines whether the simulator is in legacy mode.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.DecryptUnderZMK(System.String,System.String,ThalesSim.Core.KeySchemeTable.KeyScheme)">
 <summary>
 Decrypts data encrypted under a ZMK.
 </summary>
 <remarks>
 This method may be used with Thales commands that decrypt key encrypted under a ZMK.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.DecryptUnderZMK(System.String,System.String,ThalesSim.Core.KeySchemeTable.KeyScheme,System.String)">
 <summary>
 Decrypts data encrypted under a ZMK after applying an Atalla Variant.
 </summary>
 <remarks>
 This method may be used with Thales commands that decrypt key encrypted under a ZMK.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.GetRandomPIN(System.Int32)">
 <summary>
 Creates a random PIN.
 </summary>
 <remarks>
 This method creates a random decimal PIN.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.EncryptPINForHostStorage(System.String)">
 <summary>
 Encrypts a PIN.
 </summary>
 <remarks>
 The current implementation only adds a 0 character to the clear PIN.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.DecryptPINUnderHostStorage(System.String)">
 <summary>
 Decrypts a PIN.
 </summary>
 <remarks>
 The current implementation only removes the leading PIN character.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.EncryptPINForHostStorageThales(System.String)">
 <summary>
 Encrypts a PIN using the Thales algorithm.
 </summary>
 <remarks>
 The current implementation only adds a 0 character to the clear PIN.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.DecryptPINUnderHostStorageRacal(System.String)">
 <summary>
 Decrypts a PIN encrypted with the Racal algorithm.
 </summary>
 <remarks>
 The current implementation only removes the leading PIN character.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.GeneratePVV(System.String,System.String,System.String,System.String)">
 <summary>
 Generates a VISA PVV.
 </summary>
 <remarks>
 This method creates a 4-digit VISA PVV.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.GenerateCVV(System.String,System.String,System.String,System.String)">
 <summary>
 Generates a VISA CVV.
 </summary>
 <remarks>
 This method generates a VISA CVV.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.GenerateCSC(System.String,System.String,System.String,System.String,System.Int32)">
 <summary>
 Generates a AMEX CSC.
 </summary>
 <remarks>
 This method generates a AMEX CSC.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.GenerateMAC(System.Byte[],System.String,System.String)">
 <summary>
 Generates a MAC.
 </summary>
 <remarks>
 Generates a message authentication code.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.AddPrinterData(System.String)">
 <summary>
 Adds a line to the printer output.
 </summary>
 <remarks>
 Adds a line to the printer output.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ClearPrinterData">
 <summary>
 Clears the printer output.
 </summary>
 <remarks>
 Clears the printer output.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ReadXMLDefinitions">
 <summary>
 Reads the message field definitions using
 the class name to look for the xml file.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ReadXMLDefinitions(System.Boolean)">
 <summary>
 Reads the message field definitions using
 the class name to look for the xml file.
 </summary>
 <param name="forceRead">True to force xml fields to be re-parsed 
 and ignore the cache.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ReadXMLDefinitions(System.String)">
 <summary>
 Reads the message field definitions using
 a specific xml file name.
 </summary>
 <param name="fileName">XML file with definition.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.AHostCommand.ReadXMLDefinitions(System.Boolean,System.String)">
 <summary>
 Reads the message field definitions using
 a specific xml file name.
 </summary>
 <param name="forceRead">True to force xml fields to be re-parsed 
 and ignore the cache.</param>
 <param name="fileName">XML file with definition.</param>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.CommandChaining_NK">
 <summary>
 Allows multiple commands to be sent as a bundle.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.BuildIn.CommandChaining_NK._hasHeaders">
 <summary>
 NK Has Headers field
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.BuildIn.CommandChaining_NK._numberOfCommands">
 <summary>
 NK Number of commands field
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.CommandChaining_NK.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the NK message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.CommandChaining_NK.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.CommandChaining_NK.GetMessageResponse(ThalesSim.Core.HostCommands.AHostCommand,ThalesSim.Core.HostCommands.BuildIn.SubCommand)">
 <summary>
 Call a host command implementation and get the results back.
 </summary>
 <param name="parsedCommand">Instance of host command.</param>
 <param name="subCommand">Instance of sub command.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.CommandChaining_NK.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.CommandChaining_NK.ParseMessage(ThalesSim.Core.HostCommands.CommandExplorer,ThalesSim.Core.HostCommands.BuildIn.SubCommand)">
 <summary>
 Parses the NK contained message
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.SubCommand">
 <summary>
 Internal class that represents subcommand information.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.DecryptEncryptedPIN_NG">
 <summary>
 Decrypts an encrypted PIN.
 </summary>
 <remarks>This implements the NG Thales command.</remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.DecryptEncryptedPIN_NG.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the BA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.DecryptEncryptedPIN_NG.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.DecryptEncryptedPIN_NG.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.DerivePINUsingTheIBMMethod_EE">
 <summary>
 Derives a PIN using the IBM method.
 </summary>
 <remarks>
 This class implements the EE Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.DerivePINUsingTheIBMMethod_EE.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the EE message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.DerivePINUsingTheIBMMethod_EE.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.DerivePINUsingTheIBMMethod_EE.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.EchoTest_B2">
 <summary>
 Echoes a command back to the caller.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.EchoTest_B2.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the B2 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.EchoTest_B2.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.EchoTest_B2.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.EncryptClearPIN_BA">
 <summary>
 Encrypts a clear PIN.
 </summary>
 <remarks>This implements the BA Thales command.</remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.EncryptClearPIN_BA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the BA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.EncryptClearPIN_BA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.EncryptClearPIN_BA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GeneraceMACMABUsingAnsiX919ForLargeMessage_MS">
 <summary>
 Generates a MAC.
 </summary>
 <remarks>
 This class implements the MS Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GeneraceMACMABUsingAnsiX919ForLargeMessage_MS.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the MS message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GeneraceMACMABUsingAnsiX919ForLargeMessage_MS.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GeneraceMACMABUsingAnsiX919ForLargeMessage_MS.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateAMEXCSC_RY">
 <summary>
 Generates a AMEX CSC.
 </summary>
 <remarks>
 This class implements the RY Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAMEXCSC_RY.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CY message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAMEXCSC_RY.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAMEXCSC_RY.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateBDK_BI">
 <summary>
 Generates a random BDK.
 </summary>
 <remarks>
 This class implements the BI Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateBDK_BI.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the BI message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateBDK_BI.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateBDK_BI.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateIBMOffset_DE">
 <summary>
 Generates an IBM PIN Offset.
 </summary>
 <remarks>
 This class implements the DE Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateIBMOffset_DE.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the DE message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateIBMOffset_DE.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateIBMOffset_DE.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_M6">
 <summary>
 Generates a MAC.
 </summary>
 <remarks>
 This class implements the M6 Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_M6.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the M6 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_M6.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_M6.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_M6.ProcessMACGeneration(System.String@,System.String@,System.String@)">
 <summary>
 This method performs sanity checks and generates the MAC.
 </summary>
 <param name="ErrorCode">If non-empty is returned, a logical error has occured.</param>
 <param name="ClearKey">Returns the clear key.</param>
 <param name="GeneratedMAC">Returns the complete MAC.</param>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.HashDataBlock_GM">
 <summary>
 Hashes a block of data.
 </summary>
 <remarks>
 This class implements the GM command.
 Currently the command does NOT support ISO 10118-2 and SHA-224 hash methods.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.HashDataBlock_GM.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the GM message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.HashDataBlock_GM.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.HashDataBlock_GM.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.RSAEncryptTo3DES_SA">
 <summary>
 Translates a PIN from RSA to ZPK encryption.
 </summary>
 <remarks>
 This class implements the custom SA thales command. The implementation is not complete
 in the following ways:
 
 * There is no support for retrieving the RSA key from the message. The private
   key flag should, therefore, not have a value of 99.
 * The private key flag is ignored and a single RSA key is used, regardless
   of the index specified by the caller.
 * The source PIN block is assumed to always have ANSI X9.8 format.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.RSAEncryptTo3DES_SA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the SA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.RSAEncryptTo3DES_SA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.RSAEncryptTo3DES_SA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateBDKFromLMKToZMK_DY">
 <summary>
 Translates a BDK from LMK to ZMK encryption.
 </summary>
 <remarks>
 This class implements the DY Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateBDKFromLMKToZMK_DY.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the DY message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateBDKFromLMKToZMK_DY.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateBDKFromLMKToZMK_DY.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateBDKFromZMKToLMK_DW">
 <summary>
 Translates a BDK from ZMK to LMK encryption.
 </summary>
 <remarks>
 This class implements the DW Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateBDKFromZMKToLMK_DW.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the DW message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateBDKFromZMKToLMK_DW.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateBDKFromZMKToLMK_DW.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateKeysFromOldLMKToNewLMK_BW">
 <summary>
 Translate keys from old LMK to new LMKs.
 </summary>
 <remarks>
 This class implements the BW Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateKeysFromOldLMKToNewLMK_BW.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the BW message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateKeysFromOldLMKToNewLMK_BW.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateKeysFromOldLMKToNewLMK_BW.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromDUKPTToZPK3DES_G0">
 <summary>
 Translates a PIN block from ZPK to ZPK encryption (3DES).
 </summary>
 <remarks>
 This class implements the G0 Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromDUKPTToZPK3DES_G0.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CI message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromDUKPTToZPK3DES_G0.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromDUKPTToZPK3DES_G0.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromDUKPTToZPK_CI">
 <summary>
 Translates a PIN block from ZPK to ZPK encryption.
 </summary>
 <remarks>
 This class implements the CI Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromDUKPTToZPK_CI.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CI message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromDUKPTToZPK_CI.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromDUKPTToZPK_CI.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyAndGenerateVISAPVV_CU">
 <summary>
 Verifies a Visa PVV and generates a new PVV.
 </summary>
 <remarks>
 This class implements the CU Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyAndGenerateVISAPVV_CU.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CU message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyAndGenerateVISAPVV_CU.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyAndGenerateVISAPVV_CU.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyARQCAndOrGenerateARPC_KQ">
 <summary>
 Verifies an ARQC and optionally generates an ARPC.
 </summary>
 <remarks>
 This class implements the KQ Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyARQCAndOrGenerateARPC_KQ.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the MA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyARQCAndOrGenerateARPC_KQ.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyARQCAndOrGenerateARPC_KQ.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyDukptPINWithIBMAlgorithm_CK">
 <summary>
 Verifies a DUKPT PIN using the IBM algorithm.
 </summary>
 <remarks>
 This class implements the CK Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDukptPINWithIBMAlgorithm_CK.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CK message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDukptPINWithIBMAlgorithm_CK.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDukptPINWithIBMAlgorithm_CK.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyDukptPINWithVISAAlgorithm_CM">
 <summary>
 Verifies a DUKPT PIN using the VISA algorithm.
 </summary>
 <remarks>
 This class implements the CM Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDukptPINWithVISAAlgorithm_CM.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CM message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDukptPINWithVISAAlgorithm_CM.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDukptPINWithVISAAlgorithm_CM.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyDynamicCVV_PM">
 <summary>
 Verifies a dynamic CVV.
 </summary>
 <remarks>
 This class implements the PM command.
 Currently, this works only for Scheme ID=1 and Version=2 (MastercardPayPass-PAN provided in input and 
 IVCVC3 calculated from provided magnetic stripe data).
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDynamicCVV_PM.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the PM message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDynamicCVV_PM.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDynamicCVV_PM.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDynamicCVV_PM.CalculateDynamicCVV_MastercardPaypass(ThalesSim.Core.Cryptography.HexKey,System.String,System.String,System.String,System.String,System.String)">
 <summary>
 Calculates a MasterCard-Paypass dynamic CVV using the track data and the PAN.
 </summary>
 <param name="IMK">Initial key.</param>
 <param name="PAN">PAN.</param>
 <param name="PANSequenceNo">PAN sequence number.</param>
 <param name="trackData">Track data.</param>
 <param name="UN">Unpredictable number.</param>
 <param name="ATC">ATC (hex).</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyDynamicCVV_PM.GetIVMac(System.String,ThalesSim.Core.Cryptography.HexKey)">
 <summary>
 Calculates a MAC on the track data using the derived key.
 </summary>
 <param name="trackData">Track data used for calculation.</param>
 <param name="KD">Derived key.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePinUsingComparisonMethod_BE">
 <summary>
 Verifies a PIN using the comparison method.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePinUsingComparisonMethod_BE.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the BE message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePinUsingComparisonMethod_BE.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePinUsingComparisonMethod_BE.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePINWithIBMAlgorithm_EA">
 <summary>
 Verifies an interchange PIN using the VISA algorithm.
 </summary>
 <remarks>
 This class implements the EA Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePINWithIBMAlgorithm_EA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the EA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePINWithIBMAlgorithm_EA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePINWithIBMAlgorithm_EA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyMAC_M8">
 <summary>
 Verifies a MAC.
 </summary>
 <remarks>
 This class implements the M8 Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyMAC_M8.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the M8 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyMAC_M8.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyMAC_M8.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPinUsingComparisonMethod_BC">
 <summary>
 Verifies a terminal PIN using the comparison method.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPinUsingComparisonMethod_BC.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the BE message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPinUsingComparisonMethod_BC.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPinUsingComparisonMethod_BC.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPINwithIBMAlgorithm_DA">
 <summary>
 Verifies a terminal PIN using the IBM algorithm.
 </summary>
 <remarks>
 This class implements the DA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPINwithIBMAlgorithm_DA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the DA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPINwithIBMAlgorithm_DA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPINwithIBMAlgorithm_DA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyTruncatedApplicationCryptogram_K2">
 <summary>
 Verifies a truncated application cryptogram.
 </summary>
 <remarks>
 This class implements the K2 command.
 Currently, this works only for session key derivation method=1 (MasterCard).
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTruncatedApplicationCryptogram_K2.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the K2 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTruncatedApplicationCryptogram_K2.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTruncatedApplicationCryptogram_K2.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTruncatedApplicationCryptogram_K2.GetMac(System.String,ThalesSim.Core.Cryptography.HexKey)">
 <summary>
 Calculates a MAC on the track data using the derived key.
 </summary>
 <param name="data">Track data used for calculation.</param>
 <param name="KD">Derived key.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTruncatedApplicationCryptogram_K2.GetDecodedBytes(System.Byte[])">
 <summary>
 Bytes-to-ASCII.
 </summary>
 <param name="b"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTruncatedApplicationCryptogram_K2.GetEncodedBytes(System.String)">
 <summary>
 Hex-To-Bytes.
 </summary>
 <param name="trackData"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.CancelAuthState_RA">
 <summary>
 Cancels the authorized state.
 </summary>
 <remarks>
 This class implements the RA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.CancelAuthState_RA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.ExportKey_A8">
 <summary>
 Encrypts a key under ZMK for transmission.
 </summary>
 <remarks>
 This class implements the A8 Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.ExportKey_A8.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the A8 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.ExportKey_A8.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.ExportKey_A8.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.FormKeyFromEncryptedComponents_A4">
 <summary>
 Forms a key from encrypted components.
 </summary>
 <remarks>
 This class implements the A4 Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormKeyFromEncryptedComponents_A4.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the A4 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormKeyFromEncryptedComponents_A4.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormKeyFromEncryptedComponents_A4.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.FormZMKFromThreeComponents_GG">
 <summary>
 Form a ZMK from three encrypted components.
 </summary>
 <remarks>
 This class implements the GG Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormZMKFromThreeComponents_GG.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the GG message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormZMKFromThreeComponents_GG.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormZMKFromThreeComponents_GG.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.FormZMKFromTwoToNineComponents_GY">
 <summary>
 Forms a ZMK from 2 to 9 components.
 </summary>
 <remarks>
 This class implements the GY Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormZMKFromTwoToNineComponents_GY.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the GY message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormZMKFromTwoToNineComponents_GY.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.FormZMKFromTwoToNineComponents_GY.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintComponent_A2">
 <summary>
 Generates a random component and prints it in the clear.
 </summary>
 <remarks>
 This class implements the A2 Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintComponent_A2.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the A2 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintComponent_A2.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintComponent_A2.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintComponent_A2.ConstructResponseAfterOperationComplete">
 <summary>
 Creates the response message after printer I/O is concluded.
 </summary>
 <remarks>
 This method returns <b>Nothing</b> if the HSM is not in the authorized state.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintSplitComponents_NE">
 <summary>
 Generates a random key and prints it in the clear as split components.
 </summary>
 <remarks>
 This class implements the NE Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintSplitComponents_NE.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the NE message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintSplitComponents_NE.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintSplitComponents_NE.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintSplitComponents_NE.ConstructResponseAfterOperationComplete">
 <summary>
 Creates the response message after printer I/O is concluded.
 </summary>
 <remarks>
 This method returns <b>Nothing</b> if the HSM is not in the authorized state.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintTMPTPKPVK_OE">
 <summary>
 Generates a random key TMK, TPK or PVK and prints it in the clear.
 </summary>
 <remarks>
 This class implements the OE Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintTMPTPKPVK_OE.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the OE message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintTMPTPKPVK_OE.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintTMPTPKPVK_OE.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintTMPTPKPVK_OE.ConstructResponseAfterOperationComplete">
 <summary>
 Creates the response message after printer I/O is concluded.
 </summary>
 <remarks>
 This method returns <b>Nothing</b> if the HSM is not in the authorized state.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintZMKComponent_OC">
 <summary>
 Generates a random ZMK component and prints it in the clear.
 </summary>
 <remarks>
 This class implements the OC Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintZMKComponent_OC.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the OC message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintZMKComponent_OC.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintZMKComponent_OC.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateAndPrintZMKComponent_OC.ConstructResponseAfterOperationComplete">
 <summary>
 Creates the response message after printer I/O is concluded.
 </summary>
 <remarks>
 This method returns <b>Nothing</b> if the HSM is not in the authorized state.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateCheckValue_BU">
 <summary>
 Generate a key check value.
 </summary>
 <remarks>
 This class implements the BU Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCheckValue_BU.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the BU message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCheckValue_BU.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCheckValue_BU.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateCheckValue_KA">
 <summary>
 Generates a key check value (no double-length ZMK).
 </summary>
 <remarks>
 This class implements the KA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCheckValue_KA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the KA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCheckValue_KA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCheckValue_KA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateCVKPair_AS">
 <summary>
 Generates a VISA CVK pair.
 </summary>
 <remarks>
 This class implements the AS Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCVKPair_AS.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the AS message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCVKPair_AS.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateCVKPair_AS.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateKey_A0">
 <summary>
 Generates and encrypts key under ZMK for transmission.
 </summary>
 <remarks>
 This class implements the A0 Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateKey_A0.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the A0 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateKey_A0.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateKey_A0.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateMACForLargeMessage_MQ">
 <summary>
 Generates a MAC for a large message.
 </summary>
 <remarks>
 This class implements the MQ Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMACForLargeMessage_MQ.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the MQ message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMACForLargeMessage_MQ.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMACForLargeMessage_MQ.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_MA">
 <summary>
 Generates a MAC.
 </summary>
 <remarks>
 This class implements the MA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_MA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the MA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_MA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateMAC_MA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GeneratePVKPair_FG">
 <summary>
 Generates two random keys.
 </summary>
 <remarks>
 This class implements the FG Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GeneratePVKPair_FG.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the FG message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GeneratePVKPair_FG.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GeneratePVKPair_FG.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateRandomPIN_JA">
 <summary>
 Generates a random PIN of 4 to 12 digits.
 </summary>
 <remarks>
 This class implements the JA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateRandomPIN_JA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the JA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateRandomPIN_JA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateRandomPIN_JA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateTAK_HA">
 <summary>
 Generates a TAK.
 </summary>
 <remarks>
 This class implements the HA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateTAK_HA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the HA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateTAK_HA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateTAK_HA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateTMKTPKPVK_HC">
 <summary>
 Generates a random TMK, TPK or PVK.
 </summary>
 <remarks>
 This class implements the HC Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateTMKTPKPVK_HC.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the HC message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateTMKTPKPVK_HC.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateTMKTPKPVK_HC.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateVISACVV_CW">
 <summary>
 Generates a VISA CVV.
 </summary>
 <remarks>
 This class implements the CW Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateVISACVV_CW.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CW message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateVISACVV_CW.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateVISACVV_CW.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateVISAPVV_DG">
 <summary>
 Generates a 4-digit VISA PVV.
 </summary>
 <remarks>
 This class implements the DG Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateVISAPVV_DG.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the DG message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateVISAPVV_DG.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateVISAPVV_DG.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateZEKorZAK_FI">
 <summary>
 Generates a ZEK or ZAK.
 </summary>
 <remarks>
 This class implements the FI Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateZEKorZAK_FI.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the FI message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateZEKorZAK_FI.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateZEKorZAK_FI.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.GenerateZPK_IA">
 <summary>
 Generates a ZPK.
 </summary>
 <remarks>
 This class implements the IA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateZPK_IA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the IA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateZPK_IA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.GenerateZPK_IA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.HSMStatus_NO">
 <summary>
 Returns HSM status information.
 </summary>
 <remarks>
 This class implements the Racal HSM status command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.HSMStatus_NO.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the command message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.HSMStatus_NO.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.ImportKey_A6">
 <summary>
 Imports a key encrypted under a ZMK.
 </summary>
 <remarks>
 This class implements the A6 Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.ImportKey_A6.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the A6 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.ImportKey_A6.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.ImportKey_A6.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.LoadAdditionalFormattingData_PC">
 <summary>
 Loads additional formatting data to the HSM.
 </summary>
 <remarks>
 This class implements the PC Racal command. This implementation performs no
 processing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.LoadAdditionalFormattingData_PC.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the authorized and related I/O flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.LoadFormattingData_PA">
 <summary>
 Loads formatting data to the HSM.
 </summary>
 <remarks>
 This class implements the PA Racal command. This implementation performs no
 processing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.LoadFormattingData_PA.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the authorized and related I/O flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.LoadPINTextString_LI">
 <summary>
 Loads a PIN text string.
 </summary>
 <remarks>
 This class implements the LI Racal command. This implementation performs no
 processing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.LoadPINTextString_LI.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the authorized and related I/O flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.PrintPINSolicitationData_PE">
 <summary>
 Prints PIN solicitation data.
 </summary>
 <remarks>
 This class implements the PE Thales command. The implementation does not
 perform any processing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.PrintPINSolicitationData_PE.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the authorized and related I/O flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.PrintPINSolicitationMailer_OA">
 <summary>
 Prints PIN solicitation mailer.
 </summary>
 <remarks>
 This class implements the OA Racal command. The implementation does not
 perform any processing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.PrintPINSolicitationMailer_OA.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the authorized and related I/O flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.SetHSMDelay_LG">
 <summary>
 Sets an HSM response delay..
 </summary>
 <remarks>
 This class implements the LG Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.SetHSMDelay_LG.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the LG message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.SetHSMDelay_LG.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.SetHSMDelay_LG.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateCVKFromLMKToZMK_AU">
 <summary>
 Translates a CVK pair from encryption under the LMK to encryption under a ZMK.
 </summary>
 <remarks>
 This class implements the AU Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateCVKFromLMKToZMK_AU.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the message determiners,
 LMK pair translation and print string definitions.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateCVKFromZMKToLMK_AW">
 <summary>
 Translates a CVK pair from encryption under a ZMK to encryption under LMK.
 </summary>
 <remarks>
 This class implements the AW Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateCVKFromZMKToLMK_AW.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 Command-specific implementation of message parsers, source/target LMK pairs, 
 print strings, authorized and parity flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateKeyScheme_B0">
 <summary>
 Translates an existing key to a new key scheme.
 </summary>
 <remarks>
 This class implements the B0 Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateKeyScheme_B0.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the B0 message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateKeyScheme_B0.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateKeyScheme_B0.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromLMKToZPK_JG">
 <summary>
 Translates a PIN from LMK to ZPK encryption.
 </summary>
 <remarks>
 This class implements the JG Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromLMKToZPK_JG.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the JG message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromLMKToZPK_JG.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromLMKToZPK_JG.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromTPKToLMK_JC">
 <summary>
 Translates a PIN from TPK to LMK encryption.
 </summary>
 <remarks>
 This class implements the JC Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromTPKToLMK_JC.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the JC message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromTPKToLMK_JC.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromTPKToLMK_JC.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromTPKToZPK_CA">
 <summary>
 Translates a PIN block from TPK to ZPK encryption.
 </summary>
 <remarks>
 This class implements the CA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromTPKToZPK_CA.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CA message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromTPKToZPK_CA.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromTPKToZPK_CA.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromVISAToThales_BQ">
 <summary>
 Translates a PIN from VISA to Thales encryption.
 </summary>
 <remarks>
 This class implements the BQ Thales command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromVISAToThales_BQ.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the BQ message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromVISAToThales_BQ.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromVISAToThales_BQ.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromZPKToLMK_JE">
 <summary>
 Translates a PIN from ZPK to LMK encryption.
 </summary>
 <remarks>
 This class implements the JE Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromZPKToLMK_JE.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the JE message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromZPKToLMK_JE.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromZPKToLMK_JE.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromZPKToZPK_CC">
 <summary>
 Translates a PIN block from ZPK to ZPK encryption.
 </summary>
 <remarks>
 This class implements the CC Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromZPKToZPK_CC.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CC message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromZPKToZPK_CC.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslatePINFromZPKToZPK_CC.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateTAKFromLMKToTMK_AG">
 <summary>
 Translates a TAK from encryption under the LMK to encryption under a TMK.
 </summary>
 <remarks>
 This class implements the AG Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateTAKFromLMKToTMK_AG.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the message determiners,
 LMK pair translation and print string definitions.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateTAKFromLMKToZMK_MG">
 <summary>
 Translates a TAK from encryption under the LMK to encryption under a ZMK.
 </summary>
 <remarks>
 This class implements the MG Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateTAKFromLMKToZMK_MG.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the message determiners,
 LMK pair translation and print string definitions.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateTAKFromZMKToLMK_MI">
 <summary>
 Translates a TAK from encryption under a ZMK to encryption under LMK.
 </summary>
 <remarks>
 This class implements the MI Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateTAKFromZMKToLMK_MI.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 Command-specific implementation of message parsers, source/target LMK pairs, 
 print strings, authorized and parity flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateTMKTPKPVKFromLMKToTMKTPKPVK_AE">
 <summary>
 Translates a TMK, TPK or PVK from LMK to TMP, TPK or PVK encryption.
 </summary>
 <remarks>
 This class implements the AE Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateTMKTPKPVKFromLMKToTMKTPKPVK_AE.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the message determiners,
 LMK pair translation and print string definitions.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateTMKTPKPVKFromLMKToZMK_FE">
 <summary>
 Translates a TMK, TPK or PVK from encryption under the LMK to encryption under a ZMK.
 </summary>
 <remarks>
 This class implements the FE Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateTMKTPKPVKFromLMKToZMK_FE.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the message determiners,
 LMK pair translation and print string definitions.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateTMPTPKPVKFromZMKToLMK_FC">
 <summary>
 Translates a TMK, TPK or PVK from encryption under a ZMK to encryption under LMK.
 </summary>
 <remarks>
 This class implements the FA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateTMPTPKPVKFromZMKToLMK_FC.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 Command-specific implementation of message parsers, source/target LMK pairs, 
 print strings, authorized and parity flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateZEKORZAKFromLMKToZMK_FM">
 <summary>
 Translates a ZEK or ZAK from encryption under the LMK to encryption under a ZMK.
 </summary>
 <remarks>
 This class implements the FM Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZEKORZAKFromLMKToZMK_FM.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the message determiners,
 LMK pair translation and print string definitions.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZEKORZAKFromLMKToZMK_FM.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Accepts a message to parse.
 </summary>
 <remarks>
 The AcceptMessage method is overriden to provide parsing of the ZEK/ZAK flag.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZEKORZAKFromLMKToZMK_FM.ConstructResponse">
 <summary>
 Constructs the command response.
 </summary>
 <remarks>
 The ConstructResponse method is overriden to differentiate the <b>TargetLMK</b>
 variable, depending upon the value of the ZEK/ZAK command flag.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateZEKORZAKFromZMKToLMK_FK">
 <summary>
 Translates a ZEK or ZAK from encryption under a ZMK to encryption under LMK.
 </summary>
 <remarks>
 This class implements the FK Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZEKORZAKFromZMKToLMK_FK.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 Command-specific implementation of message parsers, source/target LMK pairs, 
 print strings, authorized and parity flags.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZEKORZAKFromZMKToLMK_FK.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Accepts a message to parse.
 </summary>
 <remarks>
 The AcceptMessage method is overriden to provide parsing of the ZEK/ZAK flag.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZEKORZAKFromZMKToLMK_FK.ConstructResponse">
 <summary>
 Constructs the command response.
 </summary>
 <remarks>
 The ConstructResponse method is overriden to differentiate the <b>TargetLMK</b>
 variable, depending upon the value of the ZEK/ZAK command flag.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateZMKFromZMKToLMK_BY">
 <summary>
 Translates a ZMK from encryption under a ZMK to encryption under LMK.
 </summary>
 <remarks>
 This class implements the BY Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZMKFromZMKToLMK_BY.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 Command-specific implementation of message parsers, source/target LMK pairs, 
 print strings, authorized and parity flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateZPKFromLMKToZMK_GC">
 <summary>
 Translates a ZPK from encryption under the LMK to encryption under a ZMK.
 </summary>
 <remarks>
 This class implements the GC Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZPKFromLMKToZMK_GC.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the message determiners,
 LMK pair translation and print string definitions.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.TranslateZPKFromZMKToLMK_FA">
 <summary>
 Translates a ZPK from encryption under a ZMK to encryption under LMK.
 </summary>
 <remarks>
 This class implements the FA Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.TranslateZPKFromZMKToLMK_FA.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 Command-specific implementation of message parsers, source/target LMK pairs, 
 print strings, authorized and parity flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyAndTranslateMAC_ME">
 <summary>
 Verifies and translates MAC.
 </summary>
 <remarks>
 This class implements the ME Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyAndTranslateMAC_ME.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the ME message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyAndTranslateMAC_ME.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyAndTranslateMAC_ME.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePINWithVISAAlgorithm_EC">
 <summary>
 Verifies an interchange PIN using the VISA algorithm.
 </summary>
 <remarks>
 This class implements the EC Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePINWithVISAAlgorithm_EC.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the EC message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePINWithVISAAlgorithm_EC.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyInterchangePINWithVISAAlgorithm_EC.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyMAC_MC">
 <summary>
 Verifies a MAC.
 </summary>
 <remarks>
 This class implements the MC Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyMAC_MC.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the MC message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyMAC_MC.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyMAC_MC.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyPINSolicitationMailerCryptography_PG">
 <summary>
 Verifies PIN solicitation mailer cryptography.
 </summary>
 <remarks>
 This class implements the PG Racal command. This implementation performs no
 processing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyPINSolicitationMailerCryptography_PG.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the authorized and related I/O flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifySolicitationMailerCryptography_RC">
 <summary>
 Verifies solicitation mailer cryptography.
 </summary>
 <remarks>
 This class implements the RC Racal command. This implementation performs no
 processing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifySolicitationMailerCryptography_RC.InitFields">
 <summary>
 Internal initialization method.
 </summary>
 <remarks>
 This method provides specific implementation of the authorized and related I/O flags.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPINWithVISAAlgorithm_DC">
 <summary>
 Verifies a terminal PIN using the VISA algorithm.
 </summary>
 <remarks>
 This class implements the DC Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPINWithVISAAlgorithm_DC.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the DC message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPINWithVISAAlgorithm_DC.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyTerminalPINWithVISAAlgorithm_DC.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.BuildIn.VerifyVISACVV_CY">
 <summary>
 Verifies a VISA CVV.
 </summary>
 <remarks>
 This class implements the CY Racal command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyVISACVV_CY.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the CY message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyVISACVV_CY.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.BuildIn.VerifyVISACVV_CY.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.CommandClass">
 <summary>
 Holds information about loaded command implementations.
 </summary>
 <remarks>
 Objects of this class contain information about <see cref="T:ThalesSim.Core.HostCommands.AHostCommand"/> implementations
 of host commands (either buildin or compliled at runtime).
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.CommandClass.CommandCode">
 <summary>
 Command code.
 </summary>
 <remarks>
 The two-character Thales command code.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.CommandClass.ResponseCode">
 <summary>
 Response code.
 </summary>
 <remarks>
 The two-character Thales response code.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.CommandClass.ResponseCodeAfterIO">
 <summary>
 Response code after I/O is concluded.
 </summary>
 <remarks>
 The two-character Thales response code after I/O is concluded.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.CommandClass.DeclaringType">
 <summary>
 The implementation type.
 </summary>
 <remarks>
 A Type with the implementation class type.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.CommandClass.Description">
 <summary>
 Command description.
 </summary>
 <remarks>
 A description of the command's purpose.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.CommandClass.AssemblyName">
 <summary>
 Assembly name.
 </summary>
 <remarks>
 The full name of the assembly containing the implemented class.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.CommandClass.#ctor(System.String,System.String,System.String,System.Type,System.String,System.String)">
 <summary>
 Class constructor.
 </summary>
 <remarks>
 Class constructor.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.CommandClass.Compare(ThalesSim.Core.HostCommands.CommandClass,ThalesSim.Core.HostCommands.CommandClass)">
 <summary>
 Implemented to sort by command code.
 </summary>
 <param name="x"></param>
 <param name="y"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.CommandExplorer">
 <summary>
 Used to find class that implement host commands.
 </summary>
 <remarks>
 The command explorer is used to find classes amongst the loaded assemblies that
 have the <see cref="T:ThalesSim.Core.HostCommands.ThalesCommandCode"/> attribute.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.CommandExplorer.#ctor">
 <summary>
 CommandExplorer constructor.
 </summary>
 <remarks>
 The constructor will search the loaded assemblies for classes that have the
 <see cref="T:ThalesSim.Core.HostCommands.ThalesCommandCode"/> attribute.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.CommandExplorer.GetLoadedCommands">
 <summary>
 Returns a summary of all loaded host commands.
 </summary>
 <remarks>
 The method returns a summary description of all loaded host commands (classes that
 inherit from <see cref="T:ThalesSim.Core.HostCommands.AHostCommand"/> and declare the 
 <see cref="T:ThalesSim.Core.HostCommands.ThalesCommandCode"/> attribute).
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.CommandExplorer.GetLoadedCommand(System.String)">
 <summary>
 Returns a <see cref="T:ThalesSim.Core.HostCommands.CommandClass"/> object for a specified command.
 </summary>
 <remarks>
 Returns a <see cref="T:ThalesSim.Core.HostCommands.CommandClass"/> object for a specified command. If the
 command is not implemented, Nothing is returned.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.CommandExplorer.ClearLoadedCommands">
 <summary>
 Clears the sorted list with the loaded commands.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.Runtime.HSMDiagnostics_NC">
 <summary>
 This class implements the NC command which
 returns HSM diagnostics to the caller.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.ThalesCommandCode">
 <summary>
 The ThalesCommandCode attribute should be attached to all classes that inherit
 from <see cref="T:ThalesSim.Core.HostCommands.AHostCommand"/>.
 </summary>
 <remarks>
 The attribute is parsed at runtime and is used by <see cref="T:ThalesSim.Core.ThalesMain"/>
 to find classes that implement host commands.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.ThalesCommandCode.CommandCode">
 <summary>
 Racal Command Code.
 </summary>
 <remarks>
 The command code of the host command implemented by a class.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.ThalesCommandCode.ResponseCode">
 <summary>
 Racal Response Code.
 </summary>
 <remarks>
 The response code of the host command implemented by a class.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.ThalesCommandCode.ResponseCodeAfterIO">
 <summary>
 Racal Response Code after I/O.
 </summary>
 <remarks>
 The response code, after I/O is concluded, of the host command implemented by a class.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.ThalesCommandCode.Description">
 <summary>
 Command description.
 </summary>
 <remarks>
 A description of the host command implemented by a class.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.ThalesCommandCode.#ctor(System.String,System.String,System.String,System.String)">
 <summary>
 Command code constructor.
 </summary>
 <remarks>
 This is the constructor of the ThalesCommandCode attribute.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.NoImplementation">
 <summary>
 Host command class that performs nothing.
 </summary>
 <remarks>
 This class is inherited by commands that do not perform any processing.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.NoImplementation.HasRelatedIO">
 <summary>
 Related I/O flag.
 </summary>
 <remarks>
 Set this to True to indicate that the implemented command performs printer I/O.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.NoImplementation.NeedsAuthorizedState">
 <summary>
 Authorized state flag.
 </summary>
 <remarks>
 Set this to True to indicate that the implemented command needs the authorized state.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.NoImplementation.Result">
 <summary>
 Processing result.
 </summary>
 <remarks>
 Set this to anything other than "OK" to indicate processing failure. This results
 in the <see cref="M:ThalesSim.Core.HostCommands.NoImplementation.ConstructResponseAfterOperationComplete"/> method returning Nothing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.NoImplementation.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.NoImplementation.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 This method must be overriden to provide specific implementation of the 
 authorized mode and related I/O flags.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.NoImplementation.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.NoImplementation.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.NoImplementation.ConstructResponseAfterOperationComplete">
 <summary>
 Creates the response message after printer I/O is concluded.
 </summary>
 <remarks>
 This method returns <b>Nothing</b> if the previous processing failed.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK">
 <summary>
 Translates a key from encryption under another key to encryption under the LMK.
 </summary>
 <remarks>
 This class is inherited by commands that perform key to LMK translation of keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.SourceLMK">
 <summary>
 Source LMK pair.
 </summary>
 <remarks>
 The LMK pair under which the source key is encrypted.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.TargetLMK">
 <summary>
 Target LMK pair.
 </summary>
 <remarks>
 The LMK pair under which the result is encrypted.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.str1">
 <summary>
 First print string.
 </summary>
 <remarks>
 Print string used to denote the clear source key.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.str2">
 <summary>
 Second print string.
 </summary>
 <remarks>
 Print string used to denote the clear target key.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.str3">
 <summary>
 Third print string.
 </summary>
 <remarks>
 Print string used to denote the encrypted target key under the source key.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.NeedsAuthorizedMode">
 <summary>
 Authorized mode flag.
 </summary>
 <remarks>
 Set this to True to indicate that the commands needs the Authorized mode.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.AllowBadParity">
 <summary>
 Bad parity flag.
 </summary>
 <remarks>
 Set this to True to indicate that it's allowed to have a parity error on the
 input key that is encrypted under the source key. If that is the case, odd
 parity is enforced on the final resulting key.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.SourceVariant">
 <summary>
 Source variant.
 </summary>
 <remarks>
 Set this to the value of the variant under which the source key is encrypted
  (default is 0 for most commands).
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.TargetVariant">
 <summary>
 Target variant.
 </summary>
 <remarks>
 Set this to the value of the variant under which the target key is to be encrypted
  (default is 0 for most commands).
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.CVKCheckDigits">
 <summary>
 CVK check digits flag.
 </summary>
 <remarks>
 Set this to True to indicate that the key translate command should produce
 CVK-style check digits.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 This method must be overriden to provide specific implementation of the 
 message determiners, LMK pair translation, print string definitions, authorized
 mode and parity flags, source and target variants and CVK-style check digit flag.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.TranslateFromKeyToLMK.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.HostCommands.TranslateFromLMKToKey">
 <summary>
 Translates a key from encryption under the LMK to another key.
 </summary>
 <remarks>
 This class is inherited by commands that implement key to LMK translation of keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.SourceLMK">
 <summary>
 Source LMK pair.
 </summary>
 <remarks>
 The LMK pair under which the source key is encrypted.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.TargetLMK">
 <summary>
 Target LMK pair.
 </summary>
 <remarks>
 The LMK pair under which the target key is encrypted.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.str1">
 <summary>
 First print string.
 </summary>
 <remarks>
 Print string used to denote the clear source key.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.str2">
 <summary>
 Second print string.
 </summary>
 <remarks>
 Print string used to denote the clear target key.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.str3">
 <summary>
 Third print string.
 </summary>
 <remarks>
 Print string used to denote the encrypted target key under the source key.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.NeedsAuthorizedMode">
 <summary>
 Authorized mode flag.
 </summary>
 <remarks>
 Set this to True to indicate that the commands needs the Authorized mode.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.UsesCheckValue">
 <summary>
 Check value flag.
 </summary>
 <remarks>
 Set this to False to indicate that the command does not return a check value.
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.SourceVariant">
 <summary>
 Source variant.
 </summary>
 <remarks>
 Set this to the value of the variant under which the source key is encrypted
  (default is 0 for most commands).
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.TargetVariant">
 <summary>
 Target variant.
 </summary>
 <remarks>
 Set this to the value of the variant under which the target key is to be encrypted
  (default is 0 for most commands).
 </remarks>
</member>
<member name="F:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.CVKCheckDigits">
 <summary>
 CVK check digits flag.
 </summary>
 <remarks>
 Set this to True to indicate that the key translate command should produce
 CVK-style check digits.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.#ctor">
 <summary>
 Constructor.
 </summary>
 <remarks>
 The constructor sets up the message parsing fields.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.InitFields">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 This method must be overriden to provide specific implementation of the 
 message determiners, LMK pair translation, print string definitions, authorized
 mode and check value flags.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.AcceptMessage(ThalesSim.Core.Message.Message)">
 <summary>
 Parses the request message.
 </summary>
 <remarks>
 This method parses the command message. The message header and message command
 code are <b>not</b> part of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.HostCommands.TranslateFromLMKToKey.ConstructResponse">
 <summary>
 Creates the response message.
 </summary>
 <remarks>
 This method creates the response message. The message header and message reply code
 are <b>not</b> part of the message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.ErrorCodes">
 <summary>
 This class abstracts the Racal returned error codes.
 </summary>
 <remarks>Most Racal error codes are declared as constants in this class.</remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_00_NO_ERROR">
 <summary>
 Racal error code 00.
 </summary>
 <remarks>No error.</remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_01_VERIFICATION_FAILURE">
 <summary>
 Racal error code 01.
 </summary>
 <remarks>
 Verification failure.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_02_INAPPROPRIATE_KEY_LENGTH_FOR_ALGORITHM">
 <summary>
 Racal error code 02.
 </summary>
 <remarks>
 Inappropriate key length for algorithm.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_03_INVALID_NUMBER_OF_COMPONENTS">
 <summary>
 Racal error code 03.
 </summary>
 <remarks>
 Invalid number of components.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_04_INVALID_KEY_TYPE_CODE">
 <summary>
 Racal error code 04.
 </summary>
 <remarks>
 Invalid key type code.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_05_INVALID_KEY_LENGTH_FLAG">
 <summary>
 Racal error code 05.
 </summary>
 <remarks>
 Invalid key length flag.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_05_INVALID_HASH_IDENTIFIER">
 <summary>
 Racal error code 05.
 </summary>
 <remarks>
 Invalid hash identifier.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_10_SOURCE_KEY_PARITY_ERROR">
 <summary>
 Racal error code 10.
 </summary>
 <remarks>
 Source key parity error.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_11_DESTINATION_KEY_PARITY_ERROR">
 <summary>
 Racal error code 11.
 </summary>
 <remarks>
 Destination key parity error.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_12_CONTENTS_OF_USER_STORAGE_NOT_AVAILABLE">
 <summary>
 Racal error code 12.
 </summary>
 <remarks>
 Contents of user storage not available.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_13_MASTER_KEY_PARITY_ERROR">
 <summary>
 Racal error code 13.
 </summary>
 <remarks>
 Master key parity error.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_14_PIN_ENCRYPTED_UNDER_LMK_PAIR_02_03_IS_INVALID">
 <summary>
 Racal error code 14.
 </summary>
 <remarks>
 PIN encrypted under LMK pair 02-03 is invalid.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_15_INVALID_INPUT_DATA">
 <summary>
 Racal error code 15.
 </summary>
 <remarks>
 Invalid input data.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_16_CONSOLE_OR_PRINTER_NOT_READY_NOT_CONNECTED">
 <summary>
 Racal error code 16.
 </summary>
 <remarks>
 Console or printer not ready/not connected.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_17_HSM_IS_NOT_IN_THE_AUTHORIZED_STATE">
 <summary>
 Racal error code 17.
 </summary>
 <remarks>
 HSM is not in the authorized state.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_18_DOCUMENT_DEFINITION_NOT_LOADED">
 <summary>
 Racal error code 18.
 </summary>
 <remarks>
 Document definition not loaded.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_19_SPECIFIED_DIEBOLD_TABLE_IS_INVALID">
 <summary>
 Racal error code 19.
 </summary>
 <remarks>
 Specified Diebold table is invalid.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_20_PIN_BLOCK_DOES_NOT_CONTAIN_VALID_VALUES">
 <summary>
 Racal error code 20.
 </summary>
 <remarks>
 PIN block does not contain valid values.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_21_INVALID_INDEX_VALUE">
 <summary>
 Racal error code 21.
 </summary>
 <remarks>
 Invalid index value.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_22_INVALID_ACCOUNT_NUMBER">
 <summary>
 Racal error code 22.
 </summary>
 <remarks>
 Invalid account number.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_23_INVALID_PIN_BLOCK_FORMAT_CODE">
 <summary>
 Racal error code 23.
 </summary>
 <remarks>
 Invalid PIN block format code.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_24_PIN_IS_FEWER_THAN_4_OR_MORE_THAN_12_DIGITS_LONG">
 <summary>
 Racal error code 24.
 </summary>
 <remarks>
 PIN is fewer than 4 or more than 12 digits long.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_25_DECIMALIZATION_TABLE_ERROR">
 <summary>
 Racal error code 25.
 </summary>
 <remarks>
 Decimalization table error.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_26_INVALID_KEY_SCHEME">
 <summary>
 Racal error code 26.
 </summary>
 <remarks>
 Invalid key scheme.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_27_INCOMPATIBLE_KEY_LENGTH">
 <summary>
 Racal error code 27.
 </summary>
 <remarks>
 Incompatible key length.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_28_INVALID_KEY_TYPE">
 <summary>
 Racal error code 28.
 </summary>
 <remarks>
 Invalid key type.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_29_FUNCTION_NOT_PERMITTED">
 <summary>
 Racal error code 29.
 </summary>
 <remarks>
 Function not permitted.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_30_INVALID_REFERENCE_NUMBER">
 <summary>
 Racal error code 30.
 </summary>
 <remarks>
 Invalid reference number.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_31_INSUFICCIENT_SOLICITATION_ENTRIES_FOR_BATCH">
 <summary>
 Racal error code 31.
 </summary>
 <remarks>
 Insuficcient solicitation entries for batch.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_33_LMK_KEY_CHANGE_STORAGE_IS_CORRUPTED">
 <summary>
 Racal error code 33.
 </summary>
 <remarks>
 LMK key change storage is corrupted.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_40_INVALID_FIRMWARE_CHECKSUM">
 <summary>
 Racal error code 40.
 </summary>
 <remarks>
 Invalid firmware checksum.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_41_INTERNAL_HARDWARE_SOFTWARE_ERROR">
 <summary>
 Racal error code 41.
 </summary>
 <remarks>
 Internal hardware/software error.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_42_DES_FAILURE">
 <summary>
 Racal error code 42.
 </summary>
 <remarks>
 DES failure.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_51_INVALID_MESSAGE_HEADER">
 <summary>
 Error code 51 
 </summary>
 <remarks>Invalid message header</remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_52_INVALID_NUMBER_OF_COMMANDS">
 <summary>
 Error code 52.
 </summary>
 <remarks>Invalid Number of Commands field.</remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_80_DATA_LENGTH_ERROR">
 <summary>
 Racal error code 80.
 </summary>
 <remarks>
 Data length error.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_90_DATA_PARITY_ERROR">
 <summary>
 Racal error code 90.
 </summary>
 <remarks>
 Data parity error.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_91_LRC_ERROR">
 <summary>
 Racal error code 91.
 </summary>
 <remarks>
 LRC error.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_92_COUNT_VALUE_NOT_BETWEEN_LIMITS">
 <summary>
 Racal error code 92.
 </summary>
 <remarks>
 Count value not between limits.
 </remarks>
</member>
<member name="F:ThalesSim.Core.ErrorCodes.ER_ZZ_UNKNOWN_ERROR">
 <summary>
 Racal error code ZZ.
 </summary>
 <remarks>
 This error code may be internally used.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ErrorCodes.GetError(System.String)">
 <summary>
 Returns error help.
 </summary>
 <remarks>
 This method returns a <see cref="T:ThalesSim.Core.ThalesError"/> object that contains
 help for the specific error code.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Constants">
 <summary>
 This module containts various constants used throught the simulator.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Constants.ZEROES">
 <summary>
 16 zeroes.
 </summary>
 <remarks>
 16 zeroes.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.DOUBLE_X917">
 <summary>
 Suffix for X9.17 double-length key determiners.
 </summary>
 <remarks>
 Suffix for X9.17 double-length key determiners.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.TRIPLE_X917">
 <summary>
 Suffix for X9.17 triple-length key determiners.
 </summary>
 <remarks>
 Suffix for X9.17 triple-length key determiners.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.DOUBLE_VARIANT">
 <summary>
 Suffix for variant double-length key determiners.
 </summary>
 <remarks>
 Suffix for variant double-length key determiners.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.TRIPLE_VARIANT">
 <summary>
 Suffix for variant triple-length key determiners.
 </summary>
 <remarks>
 Suffix for variant triple-length key determiners.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.PLAIN_DOUBLE">
 <summary>
 Suffix for double-length key determiners without a designation (X9.17).
 </summary>
 <remarks>
 Suffix for double-length key determiners without a designation (X9.17).
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.PLAIN_SINGLE">
 <summary>
 Suffix for single-length key determiners without a designation (X9.17).
 </summary>
 <remarks>
 Suffix for single-length key determiners without a designation (X9.17).
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.DELIMITER_VALUE">
 <summary>
 Delimiter value.
 </summary>
 <remarks>
 Common delimiter value used in some Racal commands.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.DELIMITER">
 <summary>
 Key value for a delimiter field.
 </summary>
 <remarks>
 Key value for a delimiter field.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.DELIMITER_EXISTS">
 <summary>
 Key value to indicate delimiter presence.
 </summary>
 <remarks>
 This value is used by a determiner if a delimiter is present.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.DELIMITER_NOT_EXISTS">
 <summary>
 Key value to indicate delimiter absence.
 </summary>
 <remarks>
 This value is used by a determiner if a delimiter is absent.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.KEY_SCHEME_ZMK">
 <summary>
 Key value used for Key Scheme ZMK fields.
 </summary>
 <remarks>
 Key value used for Key Scheme ZMK fields.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Constants.KEY_SCHEME_LMK">
 <summary>
 Key value used for Key Scheme LMK fields.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Constants.KEY_CHECK_VALUE">
 <summary>
 Key value used for Key Check Value fields.
 </summary>
 <remarks>
 Key value used for Key Check Value fields.
 </remarks>
</member>
<member name="T:ThalesSim.Core.KeySchemeTable">
 <summary>
 Class to abstract the Racal key scheme table.
 </summary>
 <remarks>Class to abstract the Racal key scheme table.</remarks>
</member>
<member name="T:ThalesSim.Core.KeySchemeTable.KeyScheme">
 <summary>
 Enumerates the Racal key scheme table values.
 </summary>
 <remarks>
 Enumerates the Racal key scheme table values.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeySchemeTable.KeyScheme.SingleDESKey">
 <summary>
 Single-length DES key encrypted using ANSI X9.17.
 </summary>
 <remarks>
 Single-length DES key encrypted using ANSI X9.17.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeySchemeTable.KeyScheme.DoubleLengthKeyVariant">
 <summary>
 Double-length key encrypted using the Variant method.
 </summary>
 <remarks>
 Double-length key encrypted using the Variant method.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeySchemeTable.KeyScheme.TripleLengthKeyVariant">
 <summary>
 Triple-length key encrypted using the Variant method.
 </summary>
 <remarks>
 Triple-length key encrypted using the Variant method.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeySchemeTable.KeyScheme.DoubleLengthKeyAnsi">
 <summary>
 Double-length key encrypted using the ANSI X9.17 method.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.KeySchemeTable.KeyScheme.TripleLengthKeyAnsi">
 <summary>
 Triple-length key encrypted using the ANSI X9.17 method.
 </summary>
 <remarks>
 Triple-length key encrypted using the ANSI X9.17 method.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeySchemeTable.KeyScheme.Unspecified">
 <summary>
 Unspecified key scheme code.
 </summary>
 <remarks>
 Unspecified key scheme code.
 </remarks>
</member>
<member name="M:ThalesSim.Core.KeySchemeTable.GetKeySchemeValue(ThalesSim.Core.KeySchemeTable.KeyScheme)">
 <summary>
 Returns a key scheme character.
 </summary>
 <remarks>
 This method returns one of Z, X, Y, U or T characters, depending upon the parameter.
 </remarks>
</member>
<member name="M:ThalesSim.Core.KeySchemeTable.GetKeySchemeFromValue(System.String)">
 <summary>
 Returns a key scheme type.
 </summary>
 <remarks>
 The method parses the input parameter to a key scheme value.
 </remarks>
</member>
<member name="T:ThalesSim.Core.KeyTypeTable">
 <summary>
 Encapsulates enumerations and methods that deal with the Racal key table.
 </summary>
 <remarks>
 This class can be used to parse/validate a key table code and to determine if
 a key function such as generation, import or export is allowed given a 
 specific key type.
 </remarks>
</member>
<member name="T:ThalesSim.Core.KeyTypeTable.KeyFunction">
 <summary>
 Key function.
 </summary>
 <remarks>
 Enumerates the Racal key functions.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeyTypeTable.KeyFunction.Generate">
 <summary>
 Key generation.
 </summary>
 <remarks>
 Designates a key generation.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeyTypeTable.KeyFunction.Import">
 <summary>
 Key import.
 </summary>
 <remarks>
 Designates a key import.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeyTypeTable.KeyFunction.Export">
 <summary>
 Key export.
 </summary>
 <remarks>
 Designates a key export.
 </remarks>
</member>
<member name="T:ThalesSim.Core.KeyTypeTable.AuthorizedStateRequirement">
 <summary>
 Enumerates requirements for key functions.
 </summary>
 <remarks>
 Enumerates requirements for key functions.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeyTypeTable.AuthorizedStateRequirement.NotAllowed">
 <summary>
 Not allowed.
 </summary>
 <remarks>
 Designates that a key function is not allowed.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeyTypeTable.AuthorizedStateRequirement.NeedsAuthorizedState">
 <summary>
 Allowed only in authorized state.
 </summary>
 <remarks>
 Designates that a key function is allowed only if the HSM is in the authorized state.
 </remarks>
</member>
<member name="F:ThalesSim.Core.KeyTypeTable.AuthorizedStateRequirement.DoesNotNeedAuthorizedState">
 <summary>
 Allowed unconditionally.
 </summary>
 <remarks>
 Designates that a key function is allowed independantly on the authorized state.
 </remarks>
</member>
<member name="M:ThalesSim.Core.KeyTypeTable.ParseKeyTypeCode(System.String,ThalesSim.Core.LMKPairs.LMKPair@,System.String@)">
 <summary>
 Parses a key type code.
 </summary>
 <remarks>
 This method parses a key type code according to the Racal key type table.
 </remarks>
</member>
<member name="M:ThalesSim.Core.KeyTypeTable.GetAuthorizedStateRequirement(ThalesSim.Core.KeyTypeTable.KeyFunction,ThalesSim.Core.LMKPairs.LMKPair,System.String)">
 <summary>
 Determines if a key function is allowed.
 </summary>
 <remarks>
 Determines if a key function is allowed and whether the authorized
 state is required for the specified function.
 </remarks>
</member>
<member name="T:ThalesSim.Core.LMKPairs">
 <summary>
 Class to declare LMK pair constants.
 </summary>
 <remarks>
 This class includes several LMK constants.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_00_01">
 <summary>
 LMK pair 00-01.
 </summary>
 <remarks>
 Contains the two smart card ""keys"" (Passwords if the HSM is configured for Password mode) required for setting the HSM into the Authorized state.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_02_03">
 <summary>
 LMK pair 02-03.
 </summary>
 <remarks>
 Encrypts the PINs for host storage.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_04_05">
 <summary>
 LMK pair 04-05.
 </summary>
 <remarks>
 Encrypts Zone Master Keys and double-length ZMKs. Encrypts Zone Master Key components under a Variant.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_06_07">
 <summary>
 LMK pair 06-07.
 </summary>
 <remarks>
 Encrypts the Zone PIN keys for interchange transactions.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_08_09">
 <summary>
 LMK pair 08-09.
 </summary>
 <remarks>
 Used for random number generation.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_10_11">
 <summary>
 LMK pair 10-11.
 </summary>
 <remarks>
 Used for encrypting keys in HSM buffer areas.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_12_13">
 <summary>
 LMK pair 12-13.
 </summary>
 <remarks>
 The initial set of Secret Values created by the user; used for generating all other Master Key pairs.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_14_15">
 <summary>
 LMK pair 14-15.
 </summary>
 <remarks>
 Encrypts Terminal Master Keys, Terminal PIN Keys and PIN Verification Keys. Encrypts Card Verification Keys under a Variant.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_16_17">
 <summary>
 LMK pair 16-17.
 </summary>
 <remarks>
 Encrypts Terminal Authentication Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_18_19">
 <summary>
 LMK pair 18-19
 </summary>
 <remarks>
 Encrypts reference numbers for solicitation mailers.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_20_21">
 <summary>
 LMK pair 20-21.
 </summary>
 <remarks>
 Encrypts 'not on us' PIN Verification Keys and Card Verification Keys under a Variant.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_22_23">
 <summary>
 LMK pair 22-23.
 </summary>
 <remarks>
 Encrypts Watchword Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_24_25">
 <summary>
 LMK pair 24-25.
 </summary>
 <remarks>
 Encrypts Zone Transport Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_26_27">
 <summary>
 LMK pair 26-27.
 </summary>
 <remarks>
 Encrypts Zone Authentication Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_28_29">
 <summary>
 LMK pair 28-29.
 </summary>
 <remarks>
 Encrypts Terminal Derivation Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_30_31">
 <summary>
 LMK pair 30-31.
 </summary>
 <remarks>
 Encrypts Zone Encryption Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_32_33">
 <summary>
 LMK pair 32-33.
 </summary>
 <remarks>
 Encrypts Terminal Encryption Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_34_35">
 <summary>
 LMK pair 34-35.
 </summary>
 <remarks>
 Encrypts RSA keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_36_37">
 <summary>
 LMK pair 36-37.
 </summary>
 <remarks>
 Encrypts RSA MAC keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_38_39">
 <summary>
 LMK pair 38-39.
 </summary>
 <remarks>
 LMK pair 38-39.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMK_PAIR_DESCRIPTION">
 <summary>
 LMK pair description.
 </summary>
 <remarks>
 LMK pair description.
 </remarks>
</member>
<member name="T:ThalesSim.Core.LMKPairs.LMKPair">
 <summary>
 Enumeration of the LMK pairs.
 </summary>
 <remarks>
 This is an enumeration of the LMK pairs.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair00_01">
 <summary>
 LMK pair 00-01.
 </summary>
 <remarks>
 Contains the two smart card ""keys"" (Passwords if the HSM is configured for Password mode) required for setting the HSM into the Authorized state.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair02_03">
 <summary>
 LMK pair 02-03.
 </summary>
 <remarks>
 Encrypts the PINs for host storage.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair04_05">
 <summary>
 LMK pair 04-05.
 </summary>
 <remarks>
 Encrypts Zone Master Keys and double-length ZMKs. Encrypts Zone Master Key components under a Variant.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair06_07">
 <summary>
 LMK pair 06-07.
 </summary>
 <remarks>
 Encrypts the Zone PIN keys for interchange transactions.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair08_09">
 <summary>
 LMK pair 08-09.
 </summary>
 <remarks>
 Used for random number generation.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair10_11">
 <summary>
 LMK pair 10-11.
 </summary>
 <remarks>
 Used for encrypting keys in HSM buffer areas.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair12_13">
 <summary>
 LMK pair 12-13.
 </summary>
 <remarks>
 The initial set of Secret Values created by the user; used for generating all other Master Key pairs.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair14_15">
 <summary>
 LMK pair 14-15.
 </summary>
 <remarks>
 Encrypts Terminal Master Keys, Terminal PIN Keys and PIN Verification Keys. Encrypts Card Verification Keys under a Variant.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair16_17">
 <summary>
 LMK pair 16-17.
 </summary>
 <remarks>
 Encrypts Terminal Authentication Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair18_19">
 <summary>
 LMK pair 18-19
 </summary>
 <remarks>
 Encrypts reference numbers for solicitation mailers.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair20_21">
 <summary>
 LMK pair 20-21.
 </summary>
 <remarks>
 Encrypts 'not on us' PIN Verification Keys and Card Verification Keys under a Variant.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair22_23">
 <summary>
 LMK pair 22-23.
 </summary>
 <remarks>
 Encrypts Watchword Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair24_25">
 <summary>
 LMK pair 24-25.
 </summary>
 <remarks>
 Encrypts Zone Transport Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair26_27">
 <summary>
 LMK pair 26-27.
 </summary>
 <remarks>
 Encrypts Zone Authentication Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair28_29">
 <summary>
 LMK pair 28-29.
 </summary>
 <remarks>
 Encrypts Terminal Derivation Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair30_31">
 <summary>
 LMK pair 30-31.
 </summary>
 <remarks>
 Encrypts Zone Encryption Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair32_33">
 <summary>
 LMK pair 32-33.
 </summary>
 <remarks>
 Encrypts Terminal Encryption Keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair34_35">
 <summary>
 LMK pair 34-35.
 </summary>
 <remarks>
 Encrypts RSA keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair36_37">
 <summary>
 LMK pair 36-37.
 </summary>
 <remarks>
 Encrypts RSA MAC keys.
 </remarks>
</member>
<member name="F:ThalesSim.Core.LMKPairs.LMKPair.Pair38_39">
 <summary>
 LMK pair 38-39.
 </summary>
 <remarks>
 LMK pair 38-39.
 </remarks>
</member>
<member name="M:ThalesSim.Core.LMKPairs.LMKTypeCodeToLMKPair(System.String,ThalesSim.Core.LMKPairs.LMKPair@,System.Int32@)">
 <summary>
 Parses a two-digit LMK type code.
 </summary>
 <remarks>
 This method parses a two-digit LMK type code.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Log.ILogProcs">
 <summary>
 Logging interface.
 </summary>
 <remarks>
 The logging interface is used by the <see cref="T:ThalesSim.Core.Log.Logger"/> class to direct
 logging messages to an implementor.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.ILogProcs.GetMajor(System.String)">
 <summary>
 Logs a major event.
 </summary>
 <remarks>
 Called when a major event is logged.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.ILogProcs.GetMinor(System.String)">
 <summary>
 Logs a minor event.
 </summary>
 <remarks>
 Called when a minor event is logged.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Log.Logger">
 <summary>
 Logging class.
 </summary>
 <remarks>
 The Logger class provides application-wide logging facilities.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Log.Logger.LogLevel">
 <summary>
 Granularity of the logging level.
 </summary>
 <remarks>
 Defines the logging level granularity.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Log.Logger.LogLevel.NoLogging">
 <summary>
 No logging.
 </summary>
 <remarks>
 No logging.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Log.Logger.LogLevel.Errror">
 <summary>
 Log errors only.
 </summary>
 <remarks>
 Log errors only.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Log.Logger.LogLevel.Warning">
 <summary>
 Same as Error, plus warning messages.
 </summary>
 <remarks>
 Same as Error, plus warning messages.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Log.Logger.LogLevel.Info">
 <summary>
 Same as Warning, plus informational messages.
 </summary>
 <remarks>
 Same as Warning, plus informational messages.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Log.Logger.LogLevel.Verbose">
 <summary>
 Same as Info, plus verbose messages.
 </summary>
 <remarks>
 Same as Info, plus verbose messages.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Log.Logger.LogLevel.Debug">
 <summary>
 Logs everything.
 </summary>
 <remarks>
 Logs everything.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Log.Logger.CurrentLogLevel">
 <summary>
 Gets or sets the current logging level.
 </summary>
 <remarks>
 Gets or sets the current logging level.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Log.Logger.LogInterface">
 <summary>
 Sets the logging interface.
 </summary>
 <remarks>
 Sets the logging interface.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.Major(System.String,ThalesSim.Core.Log.Logger.LogLevel)">
 <summary>
 Logs a major event.
 </summary>
 <remarks>
 Logs a major event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action. The same applies if the passed logging level is lower than the
 <see cref="P:ThalesSim.Core.Log.Logger.CurrentLogLevel"/>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MajorError(System.String)">
 <summary>
 Logs a major event.
 </summary>
 <remarks>
 Logs a major error event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MajorWarning(System.String)">
 <summary>
 Logs a major event.
 </summary>
 <remarks>
 Logs a major warning event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MajorInfo(System.String)">
 <summary>
 Logs a major event.
 </summary>
 <remarks>
 Logs a major informational event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MajorVerbose(System.String)">
 <summary>
 Logs a major event.
 </summary>
 <remarks>
 Logs a major verbose event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MajorDebug(System.String)">
 <summary>
 Logs a major event.
 </summary>
 <remarks>
 Logs a major debug event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.Minor(System.String,ThalesSim.Core.Log.Logger.LogLevel)">
 <summary>
 Logs a Minor event.
 </summary>
 <remarks>
 Logs a Minor event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action. The same applies if the passed logging level is lower than the
 <see cref="P:ThalesSim.Core.Log.Logger.CurrentLogLevel"/>.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MinorError(System.String)">
 <summary>
 Logs a Minor event.
 </summary>
 <remarks>
 Logs a Minor error event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MinorWarning(System.String)">
 <summary>
 Logs a Minor event.
 </summary>
 <remarks>
 Logs a Minor warning event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MinorInfo(System.String)">
 <summary>
 Logs a Minor event.
 </summary>
 <remarks>
 Logs a Minor informational event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MinorVerbose(System.String)">
 <summary>
 Logs a Minor event.
 </summary>
 <remarks>
 Logs a Minor verbose event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Log.Logger.MinorDebug(System.String)">
 <summary>
 Logs a Minor event.
 </summary>
 <remarks>
 Logs a Minor debug event. If the <see cref="P:ThalesSim.Core.Log.Logger.LogInterface"/> has not been set, the method
 takes no action.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Message.Message">
 <summary>
 This class depicts a string that represents a request message.
 </summary>
 <remarks>
 Objects of this class can be used to hold incoming message data and perform
 basic manipulation of the data.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Message.Message.MessageData">
 <summary>
 The <b>complete</b> message data.
 </summary>
 <remarks>
 This property returns all data present in the message.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Message.Message.CurrentIndex">
 <summary>
 Current positioning index.
 </summary>
 <remarks>
 This property returns the current positioning index. The index value starts
 at 0 and is advanced using the <see cref="M:ThalesSim.Core.Message.Message.AdvanceIndex(System.Int32)"/> 
 method.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.#ctor(System.String)">
 <summary>
 Default class constructor.
 </summary>
 <remarks>
 This constructor initializes the object with a string representation of the
 incoming message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.#ctor(System.Byte[])">
 <summary>
 Alternative class constructor.
 </summary>
 <remarks>
 This constructor initializes the object with a byte representation of the
 incoming message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.ResetIndex">
 <summary>
 Resets the positioning index.
 </summary>
 <remarks>
 This method resets the positioning index to 0.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.AdvanceIndex(System.Int32)">
 <summary>
 Advances the positioning index.
 </summary>
 <remarks>
 This method advances the positioning index by the specified number of bytes/characters.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.DecreaseIndex(System.Int32)">
 <summary>
 Decreases the positioning index.
 </summary>
 <param name="count">Number of bytes/characters to backtrack.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.GetSubstring(System.Int32)">
 <summary>
 Returns a substring of the message.
 </summary>
 <remarks>
 This method returns a substring of the message, starting at the positioning index.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.GetRemainingBytes">
 <summary>
 Returns the remaining bytes of the message.
 </summary>
 <remarks>
 Returns the remaining bytes of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.CharsLeft">
 <summary>
 Returns the number of characters left in the message.
 </summary>
 <remarks>
 This method returns the number of characters left in the message. This is a
 number calculated by subtracting the positioning index from the total number of
 characters of the message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.Message.GetTrailers">
 <summary>
 Returns the end sentinel and the trailer from the message and
 removes it from the message.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Message.MessageResponse">
 <summary>
 Used to construct a message response.
 </summary>
 <remarks>
 Primitive class that can be used to construct a message response.
 </remarks>
</member>
<member name="P:ThalesSim.Core.Message.MessageResponse.MessageData">
 <summary>
 Returns the constructed message data.
 </summary>
 <remarks>
 Returns the constructed message data.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.MessageResponse.AddElement(System.String)">
 <summary>
 Adds an element to the message.
 </summary>
 <remarks>
 Appends a string element to the current message.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Message.MessageResponse.AddElementFront(System.String)">
 <summary>
 Adds an element to the front of the message.
 </summary>
 <remarks>
 Adds a string element to the beginning of the current message.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Message.XML.MessageField">
 <summary>
 This class represents a message field, as that is described in an XML definition.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.Name">
 <summary>
 Get/set the field's name.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.Length">
 <summary>
 Get/set the field's length.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.DynamicLength">
 <summary>
 Get/set the name of the field to lookup
 in order to get the length for this field.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.ParseUntilValue">
 <summary>
 Get/set the message value until which
 field parsing will continue.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.MessageFieldType">
 <summary>
 Get/set the field's type.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.DependentField">
 <summary>
 Get/set the other field upon which this field depends.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.DependentValue">
 <summary>
 Get/set the expected value of the other field upon which this field depends.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.ExclusiveDependency">
 <summary>
 Get/set whether the field dependency is exclusive.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.ValidValues">
 <summary>
 Get/set the list of valid values for this field.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.OptionValues">
 <summary>
 Get/set the list of optional values for this field.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.RejectionCode">
 <summary>
 Get/set the Thales rejection code if the field value is invalid.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.Skip">
 <summary>
 Get/set whether to skip processing for this field.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.Repetitions">
 <summary>
 Get/set the number of field repetitions or the name
 of the field with the number of field repetitions.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.StaticRepetitions">
 <summary>
 Get/set whether this field demands static repetitions.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.SkipUntilValid">
 <summary>
 Get/set whether we'll continue parsing until a valid value is detected.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageField.AllowNotFoundValid">
 <summary>
 Get/set whether we allow a not-found condition if SkipUntilValid is set to True.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageField.SetDependentValue(System.String)">
 <summary>
 Set the dependent value list from a comma-separated string
 of values.
 </summary>
 <param name="s">Comma-separated string of values.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageField.Clone">
 <summary>
 Returns a copy of this instance.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Message.XML.MessageFields">
 <summary>
 This class provides a placeholder for a list of message field definitions.
 It also provides a shared method that reads the list of message field definitions.
 </summary>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageFields.Fields">
 <summary>
 Get/set the list of field definitions.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:ThalesSim.Core.Message.XML.MessageFields.IsDynamic">
 <summary>
 Determines whether this field collection can dynamically change.
 This can happen when fields exist that have a dynamic length that
 corresponds to an internal variable.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageFields.ReadXMLFields(System.String)">
 <summary>
 Read a list of field definitions from an XML file and return an instance
 of this class.
 </summary>
 <param name="xmlFile">Full path name of file to read.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageFields.RecursiveReadXMLFields(System.String)">
 <summary>
 Recursive version of ReadXMLFields.
 </summary>
 <param name="xmlFile">Full path name of file to read.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageFields.ContainsNonNullColumn(System.Data.DataRow,System.String)">
 <summary>
 Determine if a column exist in a data row and, if it does, whether it contains a value or not.
 </summary>
 <param name="dr">Data row to check.</param>
 <param name="columnName">Column name.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageFields.Clone">
 <summary>
 Returns a copy of this instance.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Message.XML.MessageFieldsStore">
 <summary>
 This class holds all message field definitions that were read.
 This is done to save file I/O and not go to the disk every time
 a message needs to be parsed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageFieldsStore.Clear">
 <summary>
 Clear the saved message fields definitions.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageFieldsStore.Add(System.String,ThalesSim.Core.Message.XML.MessageFields)">
 <summary>
 Add message fields definition.
 </summary>
 <param name="key">Key to use.</param>
 <param name="fields">Message field definitions.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageFieldsStore.Remove(System.String)">
 <summary>
 Removes a message field definition.
 </summary>
 <param name="key"></param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageFieldsStore.Item(System.String)">
 <summary>
 Return message field definitions if they exist.
 </summary>
 <param name="key">Key to search for.</param>
 <returns></returns>
 <remarks>Null is return if the message field definitions are not present.</remarks>
</member>
<member name="T:ThalesSim.Core.Message.XML.MessageFieldTypes">
 <summary>
 Message field types.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Message.XML.MessageFieldTypes.Character">
 <summary>
 Alphanumeric characters.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Message.XML.MessageFieldTypes.Numeric">
 <summary>
 Numeric characters.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Message.XML.MessageFieldTypes.Hexadecimal">
 <summary>
 Hexadecimal characters.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Message.XML.MessageFieldTypes.Binary">
 <summary>
 Binary data.
 </summary>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Message.XML.MessageParser">
 <summary>
 This class parses a message using a list of message field definitions.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageParser.Parse(ThalesSim.Core.Message.Message,ThalesSim.Core.Message.XML.MessageFields,ThalesSim.Core.Message.XML.MessageKeyValuePairs@,System.String@)">
 <summary>
 Parses a message based on message field definitions.
 </summary>
 <param name="msg">Message to parse.</param>
 <param name="fields">Instance of message field definitions to use.</param>
 <param name="KVPairs">Key/Value pairs with parsed values.</param>
 <param name="result">Resulting Thales error code. 00 is returned
 if parsing was successful and no errors were encountered.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageParser.GetCommaSeparetedListWithValues(System.Collections.Generic.List{System.String})">
 <summary>
 Return a comma-separated string which contains all values of a list of strings.
 </summary>
 <param name="lst">List of strings.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.Message.XML.MessageKeyValuePairs">
 <summary>
 This class holds a list of key/value pairs.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageKeyValuePairs.Add(System.String,System.String)">
 <summary>
 Adds a key/value pair to this instance.
 </summary>
 <param name="key">Key.</param>
 <param name="value">Value/</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageKeyValuePairs.ContainsKey(System.String)">
 <summary>
 Determines whether a value with a specific key exists.
 </summary>
 <param name="key"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageKeyValuePairs.Item(System.String)">
 <summary>
 Returns a value based on a key.
 </summary>
 <param name="key">Key.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageKeyValuePairs.ItemOptional(System.String)">
 <summary>
 Returns a value based on a key or an empty string
 if the key does not exist.
 </summary>
 <param name="key">Key.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageKeyValuePairs.ItemCombination(System.String,System.String)">
 <summary>
 Returns a combination of values based on two keys.
 </summary>
 <param name="key1">Key 1.</param>
 <param name="key2">Key 2.</param>
 <returns></returns>
 <remarks>If either key does not exist, an empty string is used
 in the place of the corresponding value.</remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageKeyValuePairs.Count">
 <summary>
 Returns the number of items in the list.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageKeyValuePairs.ToString">
 <summary>
 Returns all key-value pairs of this instance.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Message.XML.MessageKeyValuePairs.GetItemOrEmptyString(System.String)">
 <summary>
 Searches for a value corresponding to a key and returns that or an empty
 string if the key is not present.
 </summary>
 <param name="key">Key.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.PIN.PINBlockFormat">
 <summary>
 Class to facilitate PIN block handling.
 </summary>
 <remarks>
 Objects of this class can be used to construct a PIN block and determine a
 PIN from a PIN block.
 </remarks>
</member>
<member name="T:ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format">
 <summary>
 This enumeration abstracts PIN block formats.
 </summary>
 <remarks>
 This enumeration abstracts PIN block formats.
 </remarks>
</member>
<member name="F:ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format.AnsiX98">
 <summary>
 ANSI X9.8 format, code 01.
 </summary>
 <remarks>
 ANSI X9.8 format, code 01.
 </remarks>
</member>
<member name="F:ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format.Docutel">
 <summary>
 Docutel format, code 02.
 </summary>
 <remarks>
 Docutel format, code 02.
 </remarks>
</member>
<member name="F:ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format.Diebold">
 <summary>
 Diebold format, code 03.
 </summary>
 <remarks>
 Diebold format, code 03.
 </remarks>
</member>
<member name="F:ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format.Plus">
 <summary>
 PLUS network format, code 04.
 </summary>
 <remarks>
 PLUS network format, code 04.
 </remarks>
</member>
<member name="F:ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format.ISO9564_1">
 <summary>
 ISO 9564-1 Format 1, code 05.
 </summary>
 <remarks>
 ISO 9564-1 Format 1, code 05.
 </remarks>
</member>
<member name="F:ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format.InvalidPBCode">
 <summary>
 Invalid PIN Block code.
 </summary>
 <remarks>
 Invalid PIN Block code.
 </remarks>
</member>
<member name="M:ThalesSim.Core.PIN.PINBlockFormat.ToPINBlockFormat(System.String)">
 <summary>
 Parses a text PIN Block Format code.
 </summary>
 <remarks>
 Parses a text PIN Block Format code.
 </remarks>
</member>
<member name="M:ThalesSim.Core.PIN.PINBlockFormat.FromPINBlockFormat(ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format)">
 <summary>
 Creates a text PIN Block Format code.
 </summary>
 <remarks>
 Creates a text PIN Block Format code.
 </remarks>
</member>
<member name="M:ThalesSim.Core.PIN.PINBlockFormat.ToPINBlock(System.String,System.String,ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format)">
 <summary>
 This method constructs a clear PIN block.
 </summary>
 <remarks>
 This method constructs a clear PIN block.
 </remarks>
</member>
<member name="M:ThalesSim.Core.PIN.PINBlockFormat.ToPIN(System.String,System.String,ThalesSim.Core.PIN.PINBlockFormat.PIN_Block_Format)">
 <summary>
 This method determines a PIN from a PIN block.
 </summary>
 <remarks>
 This method determines a PIN from a clear PIN block.
 </remarks>
</member>
<member name="T:ThalesSim.Core.ThalesError">
 <summary>
 Represents a Racal error.
 </summary>
 <remarks>
 This class is used to hold a Racal error code and its associated help text.
 </remarks>
</member>
<member name="P:ThalesSim.Core.ThalesError.ErrorCode">
 <summary>
 Object error code.
 </summary>
 <remarks>
 Returns the Racal error code of this object.
 </remarks>
</member>
<member name="P:ThalesSim.Core.ThalesError.ErrorHelp">
 <summary>
 Object help.
 </summary>
 <remarks>
 Returns a description of the error code associated with this object.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ThalesError.#ctor(System.String,System.String)">
 <summary>
 ErrorCode constructor.
 </summary>
 <remarks>
 This constructor instantiates the ErrorCode object with appropriate data.
 </remarks>
</member>
<member name="T:ThalesSim.Core.ThalesMain">
 <summary>
 Main Racal simulator driver.
 </summary>
 <remarks>
 This class drives the Racal simulator processing. It reads configuration data,
 starts up the TCP listener socket, accepts incoming connections and creates
 <see cref="T:ThalesSim.Core.HostCommands.AHostCommand"/> objects to serve requests.
 </remarks>
</member>
<member name="E:ThalesSim.Core.ThalesMain.CommandCalled">
 <summary>
 This event is raised when a Thales command is called.
 </summary>
 <param name="sender">This instance.</param>
 <param name="commandCode">The Thales command code.</param>
 <remarks></remarks>
</member>
<member name="E:ThalesSim.Core.ThalesMain.MajorLogEvent">
 <summary>
 Major event.
 </summary>
 <remarks>
 This event is raised to communicate major events. These are simulator-wide
 events like data arrival, client connect/disconnect events, errors etc.
 </remarks>
</member>
<member name="E:ThalesSim.Core.ThalesMain.MinorLogEvent">
 <summary>
 Minor event.
 </summary>
 <remarks>
 This event is raised to communicate minor events. These are specific events like
 host command processing actions.
 </remarks>
</member>
<member name="E:ThalesSim.Core.ThalesMain.PrinterData">
 <summary>
 Printer output.
 </summary>
 <remarks>
 This event is raised to indicate that data has been printed by an executing
 host command.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.StartUp(System.String)">
 <summary>
 Initialization method.
 </summary>
 <remarks>
 This method initializes the object and starts up processing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.StartUpWithoutTCP(System.String)">
 <summary>
 Initialization method for testing.
 </summary>
 <remarks>
 This method initializes the object for testing.
 </remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.SayConfiguration">
 <summary>
 Return a human-readable string with the configuration.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.StartTCP">
 <summary>
 Startup TCP.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.StartThread(System.Threading.Thread@,System.Threading.ThreadStart,System.String)">
 <summary>
 Starts a new thread that hosts a tcp listener.
 </summary>
 <param name="t">Thread variable of thread to start.</param>
 <param name="threadStart">Thread entry point</param>
 <param name="threadMsg">Debug message.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.StartCrypto(System.String)">
 <summary>
 Starts the crypto only.
 </summary>
 <param name="XMLParameterFile">Full or relative path to XML parameters file.</param>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.ReadXMLFile(System.String)">
 <summary>
 Attempts to read an XML file with the parameters and start the crypto.
 </summary>
 <param name="fileName">XML file name.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.TryToReadValuePairFile(System.String)">
 <summary>
 Attempts to read a key/value pair file with the parameters and start the crypto.
 </summary>
 <param name="fileName">File to read.</param>
 <remarks>This is used in order to read the parameters under Mono where, for some
 reason, we get an exception when trying to load the XML document from the reader.
 We expect a file with the following format:
 - A starting ; denotes a comment and is ignored.
 - Other lines must have a Key=Value format and we expect the folliwng keys:
   * Port
   * ConsolePort
   * MaxConnections
   * LMKStorageFile
   * VBSourceDirectory
   * XMLHostDefinitionsDirectory
   * LogLevel
   * CheckLMKParity
   * FirmwareNumber
   * DSPFirmwareNumber
   * StartInAuthorizedState
   * ClearPINLength
   * LegacyMode
 </remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.SetDefaultConfiguration">
 <summary>
 Starts the crypto with default parameters.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.ThalesMain.ShutDown">
 <summary>
 Stops processing.
 </summary>
 <remarks>
 This method stops processing.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Resources">
 <summary>
 Provides in-memory storage.
 </summary>
 <remarks>
 This class provides memory storage for application-wide variables.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Resources.FIRMWARE_NUMBER">
 <summary>
 Resource name for HSM firmware number.
 </summary>
 <remarks>
 Resource for HSM firmware number.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Resources.DSP_FIRMWARE_NUMBER">
 <summary>
 Resource name for HSM DSP firmware number.
 </summary>
 <remarks>
 Resource name for HSM DSP firmware number.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Resources.MAX_CONS">
 <summary>
 Resource name for HSM maximum TCP connections.
 </summary>
 <remarks>
 Resource name for HSM maximum TCP connections.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Resources.AUTHORIZED_STATE">
 <summary>
 Resource name for boolean flag indicating whether the HSM is in the authorized state.
 </summary>
 <remarks>
 Resource name for boolean flag indicating whether the HSM is in the authorized state.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Resources.LMK_CHECK_VALUE">
 <summary>
 Resource name for the HSM LMK check value.
 </summary>
 <remarks>
 Resource name for the HSM LMK check value.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Resources.CLEAR_PIN_LENGTH">
 <summary>
 Resource name for the clear PIN length.
 </summary>
 <remarks>
 Resource name for the clear PIN length.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Resources.WELL_KNOWN_PORT">
 <summary>
 Resource name for the host port.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Resources.CONSOLE_PORT">
 <summary>
 Resource name for the console port.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Resources.HOST_COMMANDS_XML_DEFS">
 <summary>
 Resource name for host commands XML definitions.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Resources.DOUBLE_LENGTH_ZMKS">
 <summary>
 Resource name for double length ZMKs flag.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Resources.LEGACY_MODE">
 <summary>
 Resource name for the legacy mode flag.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Resources.EXPECT_TRAILERS">
 <summary>
 Resource name for the expect trailers flag.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Resources.HEADER_LENGTH">
 <summary>
 Resource name for the header length.
 </summary>
 <remarks></remarks>
</member>
<member name="F:ThalesSim.Core.Resources.EBCDIC">
 <summary>
 Resource name for EBCDIC encoding.
 </summary>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Resources.CleanUp">
 <summary>
 Cleans up all resources.
 </summary>
 <remarks>
 This method cleans up all resources that are present in the hash table.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Resources.AddResource(System.String,System.Object)">
 <summary>
 Adds a resource to memory.
 </summary>
 <remarks>
 This method adds a resource to the memory store.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Resources.GetResource(System.String)">
 <summary>
 Returns a resource value.
 </summary>
 <remarks>
 This method returns a resource from the memory store. If the resource name does
 not exist, Nothing is returned.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Resources.UpdateResource(System.String,System.Object)">
 <summary>
 Updates a resource.
 </summary>
 <remarks>
 Updates a resource value. If the resource does not exist, it is added.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Utility">
 <summary>
 Placeholder class for various utility methods.
 </summary>
 <remarks>
 Placeholder class for various utility methods.
 </remarks>
</member>
<member name="T:ThalesSim.Core.Utility.ParityCheck">
 <summary>
 Defines a parity structure.
 </summary>
 <remarks>
 Defines a parity structure.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Utility.ParityCheck.OddParity">
 <summary>
 Odd parity.
 </summary>
 <remarks>
 Odd parity.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Utility.ParityCheck.EvenParity">
 <summary>
 Even parity.
 </summary>
 <remarks>
 Even parity.
 </remarks>
</member>
<member name="F:ThalesSim.Core.Utility.ParityCheck.NoParity">
 <summary>
 No parity.
 </summary>
 <remarks>
 No parity.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.HexStringToByteArray(System.String,System.Byte[]@)">
 <summary>
 Converts a hexadecimal string to a byte array.
 </summary>
 <remarks>
 Converts a hexadecimal string to a byte array.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.ByteArrayToHexString(System.Byte[],System.String@)">
 <summary>
 Converts a byte array to a hexadecimal string.
 </summary>
 <remarks>
 Converts a byte array to a hexadecimal string.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.RandomKey(System.Boolean,ThalesSim.Core.Utility.ParityCheck)">
 <summary>
 Creates a random hexadecimal single length key.
 </summary>
 <remarks>
 Creates a random hexadecimal single length key. If <b>EnforceParity</b> is False
 or <b>Parity</b> is set to no parity, the key is not changed to enforce any bit parity.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.IsHexString(System.String)">
 <summary>
 Determines if a string is comprised of hexadecimal characters.
 </summary>
 <remarks>
 Determines if a string is comprised of hexadecimal characters.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.IsHexString(System.String,System.Boolean)">
 <summary>
 Determines if a string is comprised of hexadecimal characters.
 </summary>
 <remarks>
 Determines if a string is comprised of hexadecimal characters.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.IsParityOK(System.String,ThalesSim.Core.Utility.ParityCheck)">
 <summary>
 Checks the parity of a hexadecimal string.
 </summary>
 <remarks>
 Checks the parity of a hexadecimal string. If no parity is specified,
 the method returns True.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.MakeParity(System.String,ThalesSim.Core.Utility.ParityCheck)">
 <summary>
 Changes a hexadecimal string to achieve bit parity.
 </summary>
 <remarks>
 Changes the 8th bit of hex words in order to conform to the specified parity.
 If no parity is specified, the input is return unchanged.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.XORHexStrings(System.String,System.String)">
 <summary>
 Performs an XOR operation on two hexadecimal strings.
 </summary>
 <remarks>
 Performs an XOR operation on two hexadecimal strings. Both strings are assumed
 to be 16 characters long.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.XORHexStringsFull(System.String,System.String)">
 <summary>
 Performs an XOR operation on two hexadecimal strings.
 </summary>
 <remarks>
 Performs an XOR operation on two hexadecimal strings. XOR operation continues
 up to the length of the first string parameter.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.ORHexStringsFull(System.String,System.String,System.Int32)">
 <summary>
 Performs an OR operation on two hexadecimal strings with an offset.
 </summary>
 <remarks>
 Performs an OR operation on two hexadecimal strings. OR operation continues
 up to the length of the first string parameter.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.SHRHexString(System.String@)">
 <summary>
 Performs a Shift Right operation on a hexadecimal string.
 </summary>
 <remarks>
 Performs a Shift Right operation on a hexadecimal string.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.ANDHexStrings(System.String,System.String)">
 <summary>
 Performs an AND operation on two hexadecimal strings.
 </summary>
 <remarks>
 Performs an AND operation on two hexadecimal strings. OR operation continues
 up to the length of the first string parameter.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.ANDHexStringsOffset(System.String,System.String,System.Int32)">
 <summary>
 Performs an AND operation on two hexadecimal strings with an offset.
 </summary>
 <remarks>
 Performs an AND operation on two hexadecimal strings. OR operation continues
 up to the length of the first string parameter.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.arrayNotZero(System.Byte[])">
 <summary>
 Performs check for any non-zero in a byte array.
 </summary>
 <remarks>
 Performs check for any non-zero in a byte array
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.toBinary(System.String)">
 <summary>
 Converts a hexadecimal string to binary.
 </summary>
 <remarks>
 Converts a hexadecimal string to binary.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.fromBinary(System.String)">
 <summary>
 Converts a binary string to hexadecimal.
 </summary>
 <remarks>
 Converts a binary string to hexadecimal.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.fromBCD(System.String)">
 <summary>
 Converts a BCD-string to a number.
 </summary>
 <param name="BCDString">BCD-coded string.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Utility.toBCD(System.String)">
 <summary>
 Converts a numeric string to a BCD string.
 </summary>
 <param name="decimalString">Numeric string.</param>
 <returns></returns>
 <remarks>Numeric string must have an even length.</remarks>
</member>
<member name="M:ThalesSim.Core.Utility.Decimalise(System.String,System.String)">
 <summary>
 Decimalises a string.
 </summary>
 <remarks>
 Decimalises a string.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.RemoveKeyType(System.String)">
 <summary>
 Removes a key type code from a hex string.
 </summary>
 <remarks>
 Removes a key type code from a hex string.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.CreateRandomKey(ThalesSim.Core.KeySchemeTable.KeyScheme)">
 <summary>
 Returns a random hex key.
 </summary>
 <remarks>
 Creates a single, double or triple length random hex key.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.EncryptUnderLMK(System.String,ThalesSim.Core.KeySchemeTable.KeyScheme,ThalesSim.Core.LMKPairs.LMKPair,System.String)">
 <summary>
 Encrypts a key under an LMK pair and a variant.
 </summary>
 <remarks>
 This method encrypts a key under an LMK pair.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.DecryptUnderLMK(System.String,ThalesSim.Core.KeySchemeTable.KeyScheme,ThalesSim.Core.LMKPairs.LMKPair,System.String)">
 <summary>
 Decrypts a key encrypted under an LMK pair and a variant.
 </summary>
 <remarks>
 This method decrypts a key encrypted under an LMK pair and a variant.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.DecryptZMKEncryptedUnderLMK(System.String,ThalesSim.Core.KeySchemeTable.KeyScheme,System.Int32)">
 <summary>
 Decrypts a ZMK encrypted under LMK pair 04-05 and a variant.
 </summary>
 <remarks>
 Decrypts a ZMK encrypted under LMK pair 04-05 and a variant.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.EncryptUnderZMK(System.String,System.String,ThalesSim.Core.KeySchemeTable.KeyScheme)">
 <summary>
 Encrypts clear data under a ZMK.
 </summary>
 <remarks>
 This method may be used with Thales commands that encrypt key output under a ZMK.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.EncryptUnderZMK(System.String,System.String,ThalesSim.Core.KeySchemeTable.KeyScheme,System.String)">
 <summary>
 Encrypts clear data under a ZMK.
 </summary>
 <remarks>
 This method may be used with Thales commands that encrypt key output under a ZMK.
 </remarks>
</member>
<member name="M:ThalesSim.Core.Utility.AppendDirectorySeparator(System.String)">
 <summary>
 Appends a directory separator to a path, if one is needed.
 </summary>
 <param name="path">Path name.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Utility.getTimeMMHHSSmmmm">
 <summary>
 Returns the current time, format HH:MM:SS.mmm.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Utility.TryParseInt(System.String)">
 <summary>
 Determines whether a string is a valid integer.
 </summary>
 <param name="str">String to check.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Utility.GetExecutingDirectory">
 <summary>
 Returns the directory where the executing assembly resides.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Utility.GetBytesFromString(System.String)">
 <summary>
 Converts a string to a byte array using culture info.
 </summary>
 <param name="str"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Utility.GetBytesFromString(System.String,System.Text.Encoding)">
 <summary>
 Converts a string to a byte array using a specific encoding.
 </summary>
 <param name="str">String to convert to bytes.</param>
 <param name="encoding">Encoding to use.</param>
 <returns>Byte array with converted string.</returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Utility.GetStringFromBytes(System.Byte[])">
 <summary>
 Convers a byte array to a character string using culture info.
 </summary>
 <param name="b"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:ThalesSim.Core.Utility.TransformUsingAtallaVariant(System.String,System.String)">
 <summary>
 Transforms a hex ZMK using an Atalla variant.
 </summary>
 <param name="key">Hex key to transform.</param>
 <param name="AtallaVariant">Atalla variant.</param>
 <returns>Transformed key.</returns>
 <remarks></remarks>
</member>
<member name="T:ThalesSim.Core.TCP.WorkerClient">
 <summary>
 TPC/IP utility class.
 </summary>
 <remarks>
 The worker client is used to send and receive data from the host application.
 It abstracts TCP/IP operations and includes logic to handle a 2-byte software header
 that holds the length of the message data (excluding the length of the header itself).
 </remarks>
</member>
<member name="E:ThalesSim.Core.TCP.WorkerClient.Disconnected">
 <summary>
 Raised when the remote party disconnects.
 </summary>
 <remarks>
 This event is raised when the remote party disconnects the session.
 </remarks>
</member>
<member name="E:ThalesSim.Core.TCP.WorkerClient.MessageArrived">
 <summary>
 Raised when data arrives from the remote party.
 </summary>
 <remarks>
 This event is raised when a message is received from the remote party.
 </remarks>
</member>
<member name="P:ThalesSim.Core.TCP.WorkerClient.IsConnected">
 <summary>
 Returns the connection status.
 </summary>
 <remarks>
 Returns the connection status.
 </remarks>
</member>
<member name="M:ThalesSim.Core.TCP.WorkerClient.#ctor(System.Net.Sockets.TcpClient)">
 <summary>
 Class constructor.
 </summary>
 <remarks>
 The constructor accepts a connected <see cref="T:System.Net.Sockets.TcpClient"/> object.
 </remarks>
</member>
<member name="M:ThalesSim.Core.TCP.WorkerClient.InitOps">
 <summary>
 Object initialization.
 </summary>
 <remarks>
 Call this method after instantiating the WorkerClient object to begin waiting
 for remote party messages.
 </remarks>
</member>
<member name="M:ThalesSim.Core.TCP.WorkerClient.TermClient">
 <summary>
 Object termination.
 </summary>
 <remarks>
 Call this method to terminate the connection to the remote party and cleanup.
 </remarks>
</member>
<member name="M:ThalesSim.Core.TCP.WorkerClient.ClientIP">
 <summary>
 Returns the remote party IP address.
 </summary>
 <remarks>
 Returns the remote party IP address.
 </remarks>
</member>
<member name="M:ThalesSim.Core.TCP.WorkerClient.StreamReceive(System.IAsyncResult)">
 <summary>
 For internal use.
 </summary>
 <remarks>
 Do not call this method directly.
 </remarks>
</member>
<member name="M:ThalesSim.Core.TCP.WorkerClient.send(System.String)">
 <summary>
 Sends a message.
 </summary>
 <remarks>
 This method sends a string message to the remote party.
 </remarks>
</member>
<member name="M:ThalesSim.Core.TCP.WorkerClient.send(System.Byte[])">
 <summary>
 Sends a message.
 </summary>
 <remarks>
 This method sends a byte array message to the remote party.
 </remarks>
</member>
<member name="M:ThalesSim.Core.TCP.WorkerClient.IsEBCDICEnabled">
 <summary>
 Determines whether EBCDIC encoding is enabled.
 </summary>
 <returns>True if EBCDIC encoding is enabled, false otherwise.</returns>
 <remarks></remarks>
</member>
</members>
</doc>
